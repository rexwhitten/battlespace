<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
<meta content="text/html; charset=ISO-8859-1" http-equiv="content-type"><title>Reference Manual for the Wrapper Library for Irrlicht</title></head>
<body>
<hr style="width: 100%; height: 2px;"><br>
<table style="width: 100%; height: 100px;" border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td style="background-color: rgb(255, 186, 0); width: 128px;"><img style="width: 128px; height: 128px;" alt="" src="media/corner.jpg"></td>
<td style="background-color: rgb(255, 186, 0);"></td>
<td style="width: 512px;" background="media/squigle.jpg">
<h1 style="text-align: center;">Wrapper Library for
Irrlicht</h1>
<h1 style="text-align: center;">Reference Manual</h1>
</td>
<td></td>
<td style="width: 128px;"><a href="http://www.frankdodd.screaming.net//IrrlichtWrapper/IrrlichtWrapperPortal.htm"><img style="border: 0px solid ; width: 128px; height: 128px;" alt="" src="media/visit_button.jpg"></a></td>
</tr>
</tbody>
</table>
<hr style="width: 100%; height: 2px;">
<h2>Table of Contents</h2>
<ul>
<li><a href="#Overview">Overview</a></li>
<li><a href="#System">System</a></li>
<li><a href="#Keyboard_and_Mouse">Keyboard and
Mouse</a></li>
<li><a href="#Filing_System">Filing System</a>&nbsp;</li>
<li><a href="#2D">2D</a></li>
<li><a href="#Materials">Materials</a></li>
<li><a href="#Scene">Scene</a></li>
<li><a href="#Scene_Nodes">Node</a></li>
<li><a href="#Animation">Animation</a></li>
<li><a href="#Collision">Collision</a></li>
<li><a href="#Cameras">Camera</a></li>
<li><a href="#Lighting">Lighting</a></li>
<li><a href="#Particles">Particle System</a></li>
<li><a href="#Terrain">Terrain</a></li>
<li><a href="#Irrlicht_Graphical_User_Interface">Graphical
User Interface</a></li>
<li><a href="#Wrapper_Structure_Defintions">Wrapper
Structure Definitions</a></li>
</ul>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Overview"></a>Overview</h2>
Before using this manual I suggest that you first read the introduction
document that will introduce the basic concepts. While I have made
great effort to make this document both comprehensive and accurate
there are bound to be errors and omissions please be careful when
relying on the information when solving problems.<br>
<br>
Irrlicht is a highly impressive and powerful rendering engine that has
a wide range of operations that can be used for many types of 3D
application, it has an impressive, clean and well designed object
oriented structure that is linked to through a simple DLL interface.<br>
<br>
Unfortunately its object oriented structure makes it extremely
difficult
to use from imperative languages like FreeBasic that do not support an
object model. This is where the wrapper come in. It provides an
interface between languages like FreeBasic and the objected oriented
model of Irrlicht. Many functions are translated into simple calls that
return the objects back to FreeBasic as simple variables that it can
then manage, there is some overhead in going through the wrapper
although the interface code has been kept simple to reduce to a minimum.<br>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="System"></a>System</h2>
These calls deal with starting, running and stopping the Irrlicht
engine, it also includes calls that get system metrics and some other
miscellaneous tools.
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="1" cellspacing="1">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrStart</td>
</tr>
<tr>
<td>Syntax<br>
IrrStart ( device type , screen width as integer, screen height as
integer, bits per pixel, full screen, use shadows, capture mouse and
keyboard, vertical syncronisation )<br>
<br>
Description<br>
Starts the Irrlicht interface and opens a window for rendering.<br>
<br>
device type specifies the renderer to use when drawing to the display
this may be one of the following types: -<br>
<br>
IRR_EDT_NULL<br>
A&nbsp;NULL device with no display<br>
IRR_EDT_SOFTWARE<br>
Irrlichts default software renderer<br>
IRR_EDT_SOFTWARE2<br>
An improved quality software renderer<br>
IRR_EDT_OPENGL<br>
Hardware accelerated OpenGL renderer<br>
IRR_EDT_DIRECT3D8<br>
Hardware accelerated DirectX 8 renderer (not included in the Wrappers
'Irlicht.dll' distribution)<br>
IRR_EDT_DIRECT3D9<br>
Hardware accelerated DirectX 9 renderer (not included in the Wrappers
'Irlicht.dll' distribution)<br>
<br>
screen width specifies the width of the viewport in pixels<br>
screen height specifies the height of the viewport in pixels<br>
<br>
The number of color bits that is used for each pixel 32 bit color gives
24 million different colors
whereas 16 bit color gives only 32,000 colors. However the advantage of
16 bit color is that some operations
use half the memory and can run at up to twice the speed. This setting
can be either of: - <br>
IRR_BITS_PER_PIXEL_16<br>
IRR_BITS_PER_PIXEL_32<br>
<br>
Full screen specifies whether the display is to opened in full screen
mode or in a window<br>
IRR_WINDOWED<br>
For window mode<br>
IRR_FULLSCREEN<br>
For
fullscreen mode. When using full screen mode you will need to adjust
the window size to the same dimensions as a supported screen resolution
on the target display 640x400 for example.<br>
<br>
Use shadows starts the engine in a mode that supports the rendering of
stencil shadows.<br>
IRR_NO_SHADOWS<br>
For a display that does not support shadows.<br>
IRR_SHADOWS<br>
For a display that supports shadows.<br>
<br>
Capture mouse and keyboard specified whether you want to capture
keyboard and mouse events, if you choose to ignore them they will be
handled by Irrlicht for FPS camera control. This parameter should be
either of: -<br>
IRR_IGNORE_EVENTS<br>
IRR_CAPTURE_EVENTS<br>
<br>
vertical syncronisation specifies whether the display of each new frame
is syncronised with vertical refresh of the graphics card. This
produces a smoother display and avoids 'tearing' where the viewer can
see parts of
two different frames at the same time. The setting can be either of :-<br>
IRR_VERTICAL_SYNC_OFF<br>
IRR_VERTICAL_SYNC_ON<br>
<br>
Example<br>
</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrStart( IRR_EDT_OPENGL, screen_width, screen_height,
IRR_BITS_PER_PIXEL_32,
IRR_WINDOWED, IRR_SHADOWS, IRR_IGNORE_EVENTS, IRR_VERTICAL_SYNC_ON )<br>
IrrStop</td>
</tr>
</tbody>
</table>
<br>
<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="1" cellspacing="1">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrStartAdvanced</td>
</tr>
<tr>
<td>Syntax<br>
integer = IrrStart ( _<br>
&nbsp;&nbsp;&nbsp;&nbsp;drivertype as IRR_DEVICE_TYPES,
_<br>
&nbsp;&nbsp;&nbsp;&nbsp;scrWidth as integer, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;scrHeight as integer, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;bits as uinteger, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;fullscreen as uinteger, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;shadows as uinteger, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;dontignoreinput as uinteger, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;vsyncenabled as uinteger =
IRR_OFF, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;devicetype as uinteger = 0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;doublebufferenabled as uinteger
= IRR_ON, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;antialiasenabled as uinteger =
0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;highprecisionfpu as uinteger =
IRR_OFF )<br>
<br>
Description<br>
An advanced call for starting the Irrlicht interface and opens a window
for rendering.<br>
<br>
device type specifies the renderer to use when drawing to the display
this may be one of the following types: -<br>
<br>
IRR_EDT_NULL<br>
A&nbsp;NULL device with no display<br>
IRR_EDT_SOFTWARE<br>
Irrlichts default software renderer<br>
IRR_EDT_SOFTWARE2<br>
An improved quality software renderer<br>
IRR_EDT_OPENGL<br>
Hardware accelerated OpenGL renderer<br>
IRR_EDT_DIRECT3D8<br>
Hardware accelerated DirectX 8 renderer (not included in the Wrappers
'Irlicht.dll' distribution)<br>
IRR_EDT_DIRECT3D9<br>
Hardware accelerated DirectX 9 renderer (not included in the Wrappers
'Irlicht.dll' distribution)<br>
<br>
screen width specifies the width of the viewport in pixels<br>
screen height specifies the height of the viewport in pixels<br>
<br>
The number of color bits that is used for each pixel 32 bit color gives
24 million different colors
whereas 16 bit color gives only 32,000 colors. However the advantage of
16 bit color is that some operations
use half the memory and can run at up to twice the speed. This setting
can be either of: - <br>
IRR_BITS_PER_PIXEL_16<br>
IRR_BITS_PER_PIXEL_32<br>
<br>
Full screen specifies whether the display is to opened in full screen
mode or in a window<br>
IRR_WINDOWED<br>
For window mode<br>
IRR_FULLSCREEN<br>
For
fullscreen mode. When using full screen mode you will need to adjust
the window size to the same dimensions as a supported screen resolution
on the target display 640x400 for example.<br>
<br>
Use shadows starts the engine in a mode that supports the rendering of
stencil shadows.<br>
IRR_NO_SHADOWS<br>
For a display that does not support shadows.<br>
IRR_SHADOWS<br>
For a display that supports shadows.<br>
<br>
Capture mouse and keyboard specified whether you want to capture
keyboard and mouse events, if you choose to ignore them they will be
handled by Irrlicht for FPS camera control. This parameter should be
either of: -<br>
IRR_IGNORE_EVENTS<br>
IRR_CAPTURE_EVENTS<br>
<br>
vertical syncronisation specifies whether the display of each new frame
is syncronised with vertical refresh of the graphics card. This
produces a smoother display and avoids 'tearing' where the viewer can
see parts of
two different frames at the same time. The setting can be either of :-<br>
IRR_VERTICAL_SYNC_OFF<br>
IRR_VERTICAL_SYNC_ON<br>
<br>
devicetype allows a specific type of device for example a windows
screen or a console to be selected. For the time being this should be
set to 0 which automatically selects the best device<br>
<br>
doublebufferenabled
is used to control whether double buffering is used. When double
buffering is used two drawing surfaces are created one for display and
the other that is used for drawing too. Double buffering is required
for anit-aliasing the options are:&nbsp;IRR_ON or IRR_OFF<br>
<br>
antialiasenabled
is used to enable the antialiasing effect, this effect produces a
blurring at the edges of object giving their lines a smooth natural
appearence. There is usually a big penalty for using this effect though
sometimes as high as 30% &nbsp;of the frame rate or more. This is a
value for the anti-aliasing and should be a power of 2. (e.g: 2, 4, 8,
16)<br>
<br>
highprecisionfpu is used to enable high precision Floating
point calculations, that produce more accurate result at the expense of
a slower operating speed.<br>
<br>
Example<br>
</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrStartAdvanced ( _<br>
&nbsp;&nbsp;&nbsp; IRR_EDT_OPENGL,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Use
OpenGL<br>
&nbsp;&nbsp;&nbsp; 512, 512,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' in a window 640x480<br>
&nbsp;&nbsp;&nbsp; IRR_BITS_PER_PIXEL_32, _' using 32 bit
true color<br>
&nbsp;&nbsp;&nbsp; IRR_WINDOWED,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' in a window<br>
&nbsp;&nbsp;&nbsp; IRR_NO_SHADOWS,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' without
stencil shadows<br>
&nbsp;&nbsp;&nbsp; IRR_IGNORE_EVENTS,
_&nbsp;&nbsp;&nbsp; ' dont capture keystrokes and mouse<br>
&nbsp;&nbsp;&nbsp;
IRR_ON,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' sync to the monitor refresh rate<br>
&nbsp;&nbsp;&nbsp; 0,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' 0 = use the most appropriate window device<br>
&nbsp;&nbsp;&nbsp;
IRR_ON,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' Switch on double buffering of the display<br>
&nbsp;&nbsp;&nbsp; 4,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' Anti-aliasing level 4<br>
&nbsp;&nbsp;&nbsp; IRR_ON
)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' use high precision floating point math</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrRunning</td>
</tr>
<tr>
<td>Syntax<br>
IrrRunning<br>
<br>
Description<br>
Used to determine if the Irrlicht engine is still running.<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrStart(
IRR_EDT_OPENGL, screen_width, screen_height, IRR_WINDOWED, IRR_SHADOWS,
IRR_IGNORE_EVENTS )</span><br style="font-family: monospace;">
<span style="font-family: monospace;">While
IrrRunning</span><br style="font-family: monospace;">
<span style="font-family: monospace;">Wend</span><br style="font-family: monospace;">
<span style="font-family: monospace;">IrrStop</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrSetViewPort</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetViewPort( topX as integer, topY as integer, bottomX as integer,
bottomY as integer )<br>
<br>
Description<br>
Define the area of the screen into which elements
are going to be drawn. This can be used to draw the scene multiple
times for split screen effects.<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrSetActiveCamera(
FirstCamera )<br>
IrrSetViewPort( 0,0, 200,200 )<br>
IrrDrawScene</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrSetRenderTarget</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetRenderTarget (texture As
irr_texture,&nbsp;sceneBackgroundColor
As Uinteger = 0,&nbsp;clearBackBuffer As Ubyte =
1,&nbsp;clearZBuffer
As Ubyte = 1)<br>
<br>
Description<br>
Set the target surface for rendering, this allows
objects to be rendered to a texture that can then be drawn to the
screen or displayed on other objects. Calling this function with
texture set to 0 sets the drawing target back to the screen,.<br>
<br>
Texture is a texture created with the special
.IrrCreateRenderTargetTexture call.<br>
scene background color is generated with the FreeBasic RGBA call and
defines the colour used in any clear operation.<br>
clean back buffer when set to IRR_ON erases the background of the
texture<br>
clear z buffer when set to IRR_ON erases the depth buffer (used by
stencil shadows and some shaders) <br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">Texture
= IrrCreateRenderTargetTexture( 512, 512 )<br>
IrrSetRenderTarget( Texture, RGBA( 0,0,0,0), IRR_ON, IRR_ON )<br>
IrrDrawScene</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"> <span style="font-weight: bold;">IrrBeginScene</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrBeginScene( Red as integer, Green as integer, Blue as integer )<br>
<br>
Description<br>
Starts to draw a frame, erasing the canvas with the specified color.
The colors are integer values in the range from 0 (black) to 255 (full
intensity)<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrStart(
IRR_EDT_OPENGL, screen_width, screen_height, IRR_WINDOWED, IRR_SHADOWS,
IRR_IGNORE_EVENTS )</span><br style="font-family: monospace;">
<span style="font-family: monospace;">While
IrrRunning</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrBeginScene( 255, 255, 255 )</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrDrawScene</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrEndScene</span><br style="font-family: monospace;">
<span style="font-family: monospace;">Wend</span><br style="font-family: monospace;">
<span style="font-family: monospace;">IrrStop</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrDrawScene</td>
</tr>
<tr>
<td>Syntax<br>
IrrDrawScene<br>
<br>
Description<br>
This renders the 3D scene to the canvas, drawing all 3D elements:
nodes, particles, billboards, etc ....<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrStart(
IRR_EDT_OPENGL, screen_width, screen_height, IRR_WINDOWED, IRR_SHADOWS,
IRR_IGNORE_EVENTS )</span><br style="font-family: monospace;">
<span style="font-family: monospace;">While
IrrRunning</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrBeginScene( 255, 255, 255 )</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrDrawScene</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrEndScene</span><br style="font-family: monospace;">
<span style="font-family: monospace;">Wend</span><br style="font-family: monospace;">
<span style="font-family: monospace;">IrrStop</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrDrawSceneToTexture</td>
</tr>
<tr>
<td>Syntax<br>
IrrDrawSceneToTexture( render_texture as irr_texture )<br>
<br>
Description<br>
Draw scene manager objects to a texture surface, the texture must have
been created with a call to IrrCreateRenderTargetTexture. This is
useful for creating textures from 3D objects in your scene perhaps
nameplates in the interface for characters for example. NoteThe target
texture must be <span style="font-weight: bold; font-style: italic;">smaller</span>
than the view window as some resources are shared between the two.<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrSetActiveCamera
( StaticCamera )<br>
IrrDrawSceneToTexture ( RenderTexture )<br>
<br>
IrrBeginScene( 240, 255, 255 )<br>
<br>
IrrSetActiveCamera ( FPSCamera )<br>
IrrDrawScene</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrDrawGUI</td>
</tr>
<tr>
<td>Syntax<br>
IrrDrawGUI<br>
<br>
Description<br>
This renders the 2D graphical user interface that has been created to
the scene. At the moment this wrapper only supports a static text
object for experimentation purposes only.<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrStart(
IRR_EDT_OPENGL, screen_width, screen_height, IRR_WINDOWED, IRR_SHADOWS,
IRR_IGNORE_EVENTS )</span><br style="font-family: monospace;">
<span style="font-family: monospace;">While
IrrRunning</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrBeginScene( 255, 255, 255 )</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrDrawScene</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrDrawGUI</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;
&nbsp;IrrEndScene</span><br style="font-family: monospace;">
<span style="font-family: monospace;">Wend</span><br style="font-family: monospace;">
<span style="font-family: monospace;">IrrStop</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrEndScene</td>
</tr>
<tr>
<td>Syntax<br>
IrrEndScene<br>
<br>
Description<br>
This renders the 3D scene to the canvas, drawing all 3D elements:
nodes, particles, billboards, etc ....<br>
<br>
Example<br>
</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrStart( IRR_EDT_OPENGL, screen_width, screen_height,
IRR_WINDOWED, IRR_SHADOWS, IRR_IGNORE_EVENTS )<br>
While IrrRunning<br>
&nbsp;&nbsp; &nbsp;IrrBeginScene( 255, 255, 255 )<br>
&nbsp;&nbsp; &nbsp;IrrDrawScene<br>
&nbsp;&nbsp; &nbsp;IrrEndScene<br>
Wend<br>
IrrStop</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrStop</td>
</tr>
<tr>
<td>Syntax<br>
IrrStop<br>
<br>
Description<br>
Stop the Irrlicht Engine freeing all of the resources and closing the
display window.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrStart( IRR_EDT_OPENGL, screen_width, screen_height,
IRR_WINDOWED, IRR_SHADOWS, IRR_IGNORE_EVENTS )<br>
While IrrRunning<br>
&nbsp;&nbsp; &nbsp;IrrBeginScene( 255, 255, 255 )<br>
&nbsp;&nbsp; &nbsp;IrrDrawScene<br>
&nbsp;&nbsp; &nbsp;IrrEndScene<br>
Wend<br>
IrrStop</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrTransparentZWrite</td>
</tr>
<tr>
<td>Syntax<br>
IrrTransparentZWrite<br>
<br>
Description<br>
Allow transparency to write to the z buffer, this is nessecary
sometimes to correct problems with the ordering of transparent objects
in the scene, it may also have an effect of performance however.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrTransparentZWrite</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrGetFPS</td>
</tr>
<tr>
<td>Syntax<br>
Integer_variable = IrrGetFPS<br>
<br>
Description<br>
Get the current frame rate. This is determined by the number of times
the IrrEndScene is called per second.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>frame_rate = IrrGetFPS<br>
IrrStop()<br>
Print &#8220;Frame Rate was &#8220;;frame_rate<br>
Sleep</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrGetScreenSize</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetScreenSize( width as integer, height as integer )<br>
<br>
Description<br>
Gets the screen side into the two supplied variables.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetScreenSize( ScreenWidth, ScreenHeight )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrGetPrimitivesDrawn</td>
</tr>
<tr>
<td>Syntax<br>
unsigned_Integer_variable = IrrGetPrimitivesDrawn<br>
<br>
Description<br>
Get the current frame rate. This is determined by the number of times
the IrrEndScene is called per second.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>polygons = IrrGetPrimitivesDrawn<br>
IrrStop()<br>
Print &#8220;The system drew
about&nbsp;&#8220;;polygons;" triangles"<br>
Sleep</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrSetWindowCaption</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetWindowCaption( caption text as wide string )<br>
<br>
Description<br>
Set the caption in the Irrlicht window title bar..<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrSetWindowCaption(
&#8220;Irrlicht in Free Basic&#8221; )</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrMakeARGB </span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
unsigned_integer = IrrMakeARGB ( Alpha, Red, Green, Blue )<br>
<br>
Description<br>
Takes four values representing a colors Alpha, Red, Green and Blue
intensity and returns them as a 32bit unsigned integer. Typically used
for working with colors in IRR_VECT structures.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">vcolor
= IrrMakeARGB( 0, 255, 128, 128 )</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrQueryFeature</td>
</tr>
<tr>
<td>Syntax<br>
uinteger IrrQueryFeature( Feature as IRR_VIDEO_FEATURE_QUERY )<br>
<br>
Description<br>
Used to determine if a particular video feature is supported by the
graphics card. The function will return (1) if the feature is supported
and (0) if it isnt. The feature parameter should be either of the
following values: -<br>
EVDF_RENDER_TO_TARGET<br>
Is driver able to render to a surface?<br>
EVDF_HARDWARE_TL<br>
Is hardeware transform and lighting supported?<br>
EVDF_MULTITEXTURE<br>
Are multiple textures per material possible?<br>
EVDF_BILINEAR_FILTER<br>
Is driver able to render with a bilinear filter applied?<br>
EVDF_MIP_MAP<br>
Can the driver handle mip maps?<br>
EVDF_MIP_MAP_AUTO_UPDATE<br>
Can the driver update mip maps automatically?<br>
EVDF_STENCIL_BUFFER<br>
Are stencilbuffers switched on and does the device support stencil
buffers?<br>
EVDF_VERTEX_SHADER_1_1<br>
Is Vertex Shader 1.1 supported?<br>
EVDF_VERTEX_SHADER_2_0<br>
Is Vertex Shader 2.0 supported?<br>
EVDF_VERTEX_SHADER_3_0<br>
Is Vertex Shader 3.0 supported?<br>
EVDF_PIXEL_SHADER_1_1<br>
Is Pixel Shader 1.1 supported?<br>
EVDF_PIXEL_SHADER_1_2<br>
Is Pixel Shader 1.2 supported?<br>
EVDF_PIXEL_SHADER_1_3<br>
Is Pixel Shader 1.3 supported?<br>
EVDF_PIXEL_SHADER_1_4<br>
Is Pixel Shader 1.4 supported?<br>
EVDF_PIXEL_SHADER_2_0<br>
Is Pixel Shader 2.0 supported?<br>
EVDF_PIXEL_SHADER_3_0<br>
Is Pixel Shader 3.0 supported?<br>
EVDF_ARB_VERTEX_PROGRAM_1<br>
Are ARB vertex programs v1.0 supported?<br>
EVDF_ARB_FRAGMENT_PROGRAM_1<br>
Are ARB fragment programs v1.0 supported?<br>
EVDF_ARB_GLSL<br>
Is GLSL supported?<br>
EVDF_HLSL<br>
Is HLSL supported?<br>
EVDF_TEXTURE_NPOT<br>
Are non-power-of-two textures supported?<br>
EVDF_FRAMEBUFFER_OBJECT<br>
Are framebuffer objects supported?<br>
EVDF_VERTEX_BUFFER_OBJECT<br>
Are vertex buffer objects supported?<br>
EVDF_ALPHA_TO_COVERAGE<br>
Is alpha to coverage supported?<br>
EVDF_COLOR_MASK<br>
Are color masks supported?<br>
EVDF_MULTIPLE_RENDER_TARGETS<br>
Are multiple render targets&nbsp;supported?<br>
EVDF_MRT_BLEND<br>
Are seperate blend settings for render targets supported?<br>
EVDF_MRT_COLOR_MASK<br>
Are seperate color masks for render targets supported?<br>
EVDF_MRT_BLEND_FUNC<br>
Are seperate blend functions for render targets supported?<br>
EVDF_GEOMETRY_SHADER<br>
Are geometry shaders supported?<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">if
IrrQueryFeature( EVDF_MULTITEXTURE ) = 0 then <br>
&nbsp;&nbsp;? "MultiTexture is NOT supported"<br>
End if<br>
</span> </td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 51);">IrrDisableFeature</td>
</tr>
<tr>
<td>Syntax<br>
uinteger IrrDisableFeature( Feature as IRR_VIDEO_FEATURE_QUERY, state
as uinteger )<br>
<br>
Description<br>
Used to disable a particular video feature on the
graphics card. The feature parameter is identical to IrrQueryFeature.<br>
<br>
State should be either IRR_ON or IRR_OFF<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrDisableFeature(
EVDF_MULTITEXTURE, IRR_OFF )<br>
</span></td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrGetTime&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
unsigned_integer = IrrGetTime<br>
<br>
Description<br>
Get the current time in milliseconds.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">time
= IrrGetTime</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrSetTime&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetTime( time as uinteger )<br>
<br>
Description<br>
Set the current animation time in milliseconds.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrSetTime(
2500 )</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrIsFullscreen&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrIsFullscreen() as integer<br>
<br>
Description<br>
Checks if the Irrlicht window is running in
fullscreen mode. Returns 0 if the application is windowed any other
value indicates full screen mode<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">if
IrrIsFullscreen = IRR_OFF Then Print "Windowed Mode"</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrIsWindowActive&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrIsWindowActive() as integer<br>
<br>
Description<br>
Checks if Irrlicht window is active. Returns 0 if the application is
windowed any other
value indicates full screen mode<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">if
IrrIsWindowActive &gt; 0 Then Print IrrDrawScene</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrIsWindowFocused&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrIsWindowFocused() as integer<br>
<br>
Description<br>
Checks if the Irrlicht window has focus. Returns 0 if the application
is windowed any other
value indicates full screen mode<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">if
IrrIsWindowFocused &gt; 0 Then Print IrrDrawScene</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrIsWindowMinimized&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrIsWindowMinimized() as integer<br>
<br>
Description<br>
Checks if the Irrlicht window is minimized.&nbsp;Returns 0 if the
application is windowed any other
value indicates full screen mode<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">if
IrrIsWindowMinimized = 0 Then Print IrrDrawScene</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrMaximizeWindow&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrMaximizeWindow()<br>
<br>
Description<br>
Maximizes the window if possible.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrMaximizeWindow</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrMinimizeWindow&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrMinimizeWindow()<br>
<br>
Description<br>
Minimizes the window if possible.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrMinimizeWindow</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrRestoreWindow&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrRestoreWindow()<br>
<br>
Description<br>
Restore the window to normal size if possible.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrRestoreWindow</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 51);"><span style="font-weight: bold;">IrrResizableWindow&nbsp;</span><br>
</td>
</tr>
<tr>
<td>Syntax<br>
IrrResizableWindow()<br>
<br>
Description<br>
Make the irrlicht window resizable by dragging on the corner of the
window.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrResizableWindow</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Keyboard_and_Mouse"></a>Keyboard
and Mouse</h2>
These calls allow you recover keyboard events and mouse actions that
the user creates.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrKeyEventAvailable</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetWindowCaption<br>
<br>
Description<br>
Determine if there are any keystrokes waiting to be read..<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>while IrrKeyEventAvailable<br>
&nbsp;&nbsp; &nbsp;KeyEvent = IrrReadKeyEvent<br>
Wend<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrReadKeyEvent</td>
</tr>
<tr>
<td>Syntax<br>
irr_key_event_pointer = IrrReadKeyEvent<br>
<br>
Description<br>
Read a key event from the Irrlicht window the properties of the key
event are stored in the returned type.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>While IrrKeyEventAvailable<br>
&nbsp;&nbsp; &nbsp;KeyEvent = IrrReadKeyEvent<br>
&nbsp; &nbsp; If KeyEvent-&gt;key = IRR_KEY_DOWN then<br>
&nbsp; &nbsp; &nbsp; &nbsp; Movement = DOWN<br>
&nbsp; &nbsp; End If<br>
Wend</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrMouseEventAvailable</td>
</tr>
<tr>
<td>Syntax<br>
IrrMouseEventAvailable<br>
<br>
Description<br>
Determine if there are any mouse actions waiting to be read.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>while IrrMouseEventAvailable<br>
&nbsp;&nbsp; &nbsp;MouseEvent = IrrReadMouseEvent<br>
Wend</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrReadMouseEvent</td>
</tr>
<tr>
<td>Syntax<br>
irr_mouse_event_pointer = IrrReadMouseEvent<br>
<br>
Description<br>
Read a mouse event from the Irrlicht window the properties of the mouse
event are stored in the returned type.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">while
IrrMouseEventAvailable</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;
' read the mouse event out</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;
MouseEvent = IrrReadMouseEvent</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;
if MouseEvent-&gt;action = IRR_EMIE_MOUSE_MOVED then</span><br style="font-family: monospace;">
<span style="font-family: monospace;"></span><span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SPIN = MouseEvent-&gt;x</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;&nbsp;&nbsp;
endif</span><br style="font-family: monospace;">
<span style="font-family: monospace;"></span><span style="font-family: monospace;">wend</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrSetMousePosition</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMousePosition( x as single, y as single )<br>
<br>
Description<br>
Set the position of the mouse pointer and return the relative change in
position.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMousePosition( XPosition, YPosition )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrGetAbsoluteMousePosition</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetAbsoluteMousePosition( x as single, y as single )<br>
<br>
Description<br>
Gets the absoloute position of the mouse pointer.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetAbsoluteMousePosition( XPosition, YPosition )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrHideMouse</td>
</tr>
<tr>
<td>Syntax<br>
IrrHideMouse<br>
<br>
Description<br>
Hide&nbsp;the mouse pointer&nbsp;<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrHideMouse</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrShowMouse</td>
</tr>
<tr>
<td>Syntax<br>
IrrShowMouse<br>
<br>
Description<br>
Shows the mouse pointer&nbsp;<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrShowMouse</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(102, 255, 153);">IrrDisplayMouse</td>
</tr>
<tr>
<td>Syntax<br>
IrrDisplayMouse( hide or show the mouse as integer )<br>
<br>
Description<br>
Hide or show the mouse pointer while it is within the Irrlicht display.
There are two macro's available for the function IrrHideMouse and
IrrShowMouse to simply hide or show the mouse. 1 shows the mouse
pointer and 0 hides it.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrDisplayMouse(
0 )</span></td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Filing_System"></a>Filing System</h2>
These calls deal with the way irrlicht operates with the filing system
and adds archives to its a virtual filling system allowing you to
compress data into zipfiles that you can access without decompressing
them.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 255, 102);"><span style="font-weight: bold;">IrrAddZipFile</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrAddZipFile( zip file as zstring, ignore case, ignore paths )<br>
<br>
Description<br>
Adds a zip archive to the filing system allowing you to load files
straight out of the zip file. Common pk3 files are simply zip files<br>
<br>
Ignore case should be one of the following values: -<br>
IRR_USE_CASE<br>
IRR_IGNORE_CASE<br>
<br>
Ignore paths allows you to simply use the filename without the path,
the filename should always be unique in the archive when using this
option. The value should be one of the following: -<br>
IRR_USE_PATHS<br>
IRR_IGNORE_PATHS<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrAddZipFile(
"data.pk3", IRR_IGNORE_CASE, IRR_IGNORE_PATHS )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 255, 102);"><span style="font-weight: bold;">IrrChangeWorkingDirectory</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrChangeWorkingDirectory( New directory as zstring )<br>
<br>
Description<br>
Change the working directory of the Irrlicht Environment.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrChangeWorkingDirectory( "c:\media" )</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 255, 102);"><span style="font-weight: bold;">IrrGetWorkingDirectory</span></td>
</tr>
<tr>
<td>Syntax<br>
string = IrrGetWorkingDirectory<br>
<br>
Description<br>
Get the current working directory of the Irrlicht Environment.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>CurrentDirectory = IrrGetWorkingDirectory</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="2D"></a><span style="font-weight: bold;"></span>2D</h2>
Support for 2D operations including the loading of bitmaps that can be
used for texturing 3D objects or for display on the screen as 2D
sprites.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrSetTextureCreationFlag</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSetTextureCreationFlag( flag_to_set as IRR_TEXTURE_CREATION_FLAG,
flag_value as uinteger )<br>
<br>
Description<br>
Sets texture creation flags controlling how textures are handled when
they are created. The following flags can be set: -
<p>ETCF_ALWAYS_16_BIT<br>
Forces the driver to always create 16 bit textures, independently of
which format the file on disk has. When choosing this you may loose
some color detail, but gain speed and save memory. 16 bit textures can
be transferred twice as quickly as 32 bit textures and only use half of
the memory space. When using this flag, it does not make sense to use
the flags ETCF_ALWAYS_32_BIT, ETCF_OPTIMIZED_FOR_QUALITY, or
ETCF_OPTIMIZED_FOR_SPEED at the same time.</p>
<p>ETCF_ALWAYS_32_BIT<br>
Forces the driver to always create 32 bit textures, independently of
which format the file on disk has. Please note that some drivers (like
the software device) will ignore this, because they are only able to
create and use 16 bit textures. When using this flag, it does not make
sense to use the flags ETCF_ALWAYS_16_BIT, ETCF_OPTIMIZED_FOR_QUALITY,
or ETCF_OPTIMIZED_FOR_SPEED at the same time.</p>
<p>ETCF_OPTIMIZED_FOR_QUALITY<br>
Lets the driver decide in which format the textures are created and
tries to make the textures look as good as possible. Usually it simply
chooses the format in which the texture was stored on disk. When using
this flag, it does not make sense to use the flags ETCF_ALWAYS_16_BIT,
ETCF_ALWAYS_32_BIT, or ETCF_OPTIMIZED_FOR_SPEED at the same time.</p>
<p>ETCF_OPTIMIZED_FOR_SPEED<br>
Lets the driver decide in which format the textures are created and
tries to create them maximizing render speed. When using this flag, it
does not make sense to use the flags ETCF_ALWAYS_16_BIT,
ETCF_ALWAYS_32_BIT, or ETCF_OPTIMIZED_FOR_QUALITY, at the same time.</p>
<p>ETCF_CREATE_MIP_MAPS<br>
Automatically creates mip map levels for the textures. </p>
<p>ETCF_NO_ALPHA_CHANNEL<br>
Discard any alpha layer and use non-alpha color format. <br>
<br>
Example</p>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrSetTextureCreationFlag(
ETCF_ALWAYS_32_BIT, IRR_ON )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">IrrGetTexture</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_texture = IrrGetTexture( Texture file name as zstring )<br>
<br>
Description<br>
Load a 2D texture from a bitmap file into video memoy that can then be
used to texture a
model or to draw onto the screen.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrlichtLogo
= IrrGetTexture( "irrlicht.bmp" )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">IrrGetImage</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_texture = IrrGetImage( Texture file name as zstring )<br>
<br>
Description<br>
Load a 2D texture from a bitmap file into main memory that can then be
used to supply a heightmap to a terrain or other similar CPU based
operations. The images can not be used to texture 3D objects.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">TerrainMap
= IrrGetImage( "heightmap.bmp" )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrCreateTexture</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_texture = IrrCreateTexture( texture_name as zstring, x_size as
integer, y_size as integer, format as IRR_COLOR_FORMAT&nbsp; )<br>
<br>
Description<br>
Creates a blank texture. The format of the texture can be one of the
following: -
<p>ECF_A1R5G5B5<br>
16 bit color format used by the software driver, and thus preferred by
all other irrlicht engine video drivers. There are 5 bits for every
color component, and a single bit is left for alpha information. </p>
<p>ECF_R5G6B5<br>
Standard 16 bit color format. </p>
<p>ECF_R8G8B8<br>
24 bit color, no alpha channel, but 8 bit for red, green and blue. </p>
<p>ECF_A8R8G8B8<br>
Default 32 bit color format. 8 bits are used for every component: red,
green, blue and alpha. <br>
<br>
<br>
Example</p>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrlichtLogo
= IrrCreateTexture( "mytexture", 128, 128, ECF_A8R8G8B8 )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrCreateImage</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_image = IrrCreateImage( x_size as
integer, y_size as integer, format as IRR_COLOR_FORMAT&nbsp; )<br>
<br>
Description<br>
Creates a blank image, does not use video memory. The format of the
image can be one of the
following: -
<p>ECF_A1R5G5B5<br>
16 bit color format used by the software driver, and thus preferred by
all other irrlicht engine video drivers. There are 5 bits for every
color component, and a single bit is left for alpha information. </p>
<p>ECF_R5G6B5<br>
Standard 16 bit color format. </p>
<p>ECF_R8G8B8<br>
24 bit color, no alpha channel, but 8 bit for red, green and blue. </p>
<p>ECF_A8R8G8B8<br>
Default 32 bit color format. 8 bits are used for every component: red,
green, blue and alpha. <br>
<br>
<br>
Example</p>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">BlankPicture
= IrrCreateImage( 128, 128, ECF_A8R8G8B8 )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrRemoveTexture</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveTexture( texture as irr_texture )<br>
<br>
Description<br>
Removes the texture from memory freeing up the space it occupied. You
should ensure that the texture is not in use by materials assigned to
nodes.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">DIM
MyTexture as irr_texture<br>
MyTexture</span><span style="font-family: monospace;">
= IrrGetTexture( "irrlicht.bmp" )<br>
IrrRemoveTexture( MyTexture )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrRemoveImage</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveImage( image as irr_image )<br>
<br>
Description<br>
Removes the image from memory freeing up the space it occupied. You
should ensure that the image is not in use by other functions.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">DIM
MyImage as irr_image<br>
MyImage</span><span style="font-family: monospace;">
= IrrGetImage( "irrlicht.bmp" )<br>
IrrRemoveImage( MyImage )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrLockTexture</span></td>
</tr>
<tr>
<td>Syntax<br>
pixels_ptr = IrrLockTexture( texture as irr_texture )<br>
<br>
Description<br>
Locks the texture and returns a pointer to the pixels.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">DIM
texture_pixels as uinteger ptr<br>
texture_pixels</span><span style="font-family: monospace;">
= IrrLockTexture( MyTexture )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrUnlockTexture</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrUnlockTexture( texture as irr_texture )<br>
<br>
Description<br>
Unlock the texture, presumably after it has been modified and recreate
the mipmap levels.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrUnlockTexture(
MyTexture )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrLockImage</span></td>
</tr>
<tr>
<td>Syntax<br>
pixels_ptr = IrrLockImage( image as irr_image )<br>
<br>
Description<br>
Locks the image and returns a pointer to the pixels.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">DIM
image_pixels as uinteger ptr<br>
image_pixels</span><span style="font-family: monospace;">
= IrrLockImage( MyImage )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrUnlockImage</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrUnlockImage( image as irr_image )<br>
<br>
Description<br>
Unlock the image, presumably after it has been modified.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrUnlockImage(
MyImage )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrCreateRenderTargetTexture</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_texture = IrrCreateRenderTargetTexture( x_size as integer, y_size
as integer )<br>
<br>
Description<br>
Create a texture that is suitable for the scene manager to use as a
surface to which it can render its 3d object. Each of the dimentions
must be of&nbsp;a power of two for example 128x128 or 256x256.<br>
<br>
This
function is very important when producing texture maps for special
effects for example a rendering of a model for a 2D image displayed in
the HUD, the rendering of a model for display on a 3D surface for
example a video display of virtual camera, the rendering of the texture
for the reflection of a mirror, the rendering of the environment for
use in a water or chrome shader. Most cards, even old cards, will
support this very important function.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">RenderTexture
= IrrCreateRenderTargetTexture ( 256, 256 )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">IrrMakeNormalMapTexture</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrMakeNormalMapTexture( Texture object as irr_texture, Amplitude as
single )<br>
<br>
Description<br>
Create a normal map from a gray-scale height map texture. Normal maps
are used to add a high level of surface lighting detail to what are
normally low resolution models. They can have a massive effect on the
realism of an object, the model you create will have to be created in
"tangent" space to support this.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrMakeNormalMapTexture(&nbsp;WallBumps,
0.9 )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">IrrColorKeyTexture</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrColorKeyTexture( Texture object as irr_texture, Red as integer,
Green as integer, Blue as integer )<br>
<br>
Description<br>
Copies any parts of the texture that are the same as the specified
color into the textures alpha channel. This can then be used for
special effects or to make these regions transparent.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrColorKeyTexture(&nbsp;IrrlichtLogo,
255, 255, 255 )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">IrrDraw2DImage</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrDraw2DImage( Texture to draw as irr_texture, X position as integer,
Y position as integer )<br>
<br>
Description<br>
Draws the texture to the display at the supplied co-ordinates.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrDraw2DImage(
IrrlichtLogo, 4, 4 )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">IrrDraw2DImageElement</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrDraw2DImageElement( Texture to draw as irr_texture, X position as
integer, Y position as integer, Source
top X as integer, Source top Y as integer, Source bottom X as integer,
Source bottom Y as integer, whether to use
alpha as integer )<br>
<br>
Description<br>
Draws the texture to the display at the supplied co-ordinates, the
image is copied from the specified rectangle in the source texture,
this enables you to put many images onto a single texture. This
function also supports the alpha channel when drawing the image to the
display and can draw the image transparently.<br>
<br>
The value for whether or not to use the alpha channel should be one of
the following values: -<br>
IRR_IGNORE_ALPHA<br>
IRR_USE_ALPHA<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrDraw2DImageElement(
FreeBasicLogo, screen_width - 60 - 4, 4,0,0,60,31, IRR_USE_ALPHA )</span></td>
</tr>
</tbody>
</table>
<span style="font-weight: bold;"></span><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">IrrDraw2DImageElementStretch</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrDraw2DImageElementStretch (texture as
irr_texture,&nbsp;destination
top X as&nbsp;integer, destination top Yas&nbsp;integer,
destination
bottom X as integer, destination bottom Y as integer, source top X as
integer, source top Y as integer, source bottom X as integer, source
bottom Y as integer, use Alpha as integer )<br>
<br>
Description<br>
Draws the texture to the display into the supplied
rectangle, the
image is copied from the specified rectangle in the source texture,
this enables you to put many images onto a single texture. If the
rectangles are different sizes this function will scale the images
appropriately. This
function also supports the alpha channel when drawing the image to the
display and can draw the image transparently.<br>
<br>
The value for whether or not to use the alpha channel should be one of
the following values: -<br>
IRR_IGNORE_ALPHA<br>
IRR_USE_ALPHA<br>
<br>
Example<br>
</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrDraw2DImageElementStretch(
FreeBasicLogo, 16, 16, 80, 80, &nbsp;0, 0, 32, 32, IRR_USE_ALPHA )</span></td>
</tr>
</tbody>
</table>
<span style="font-weight: bold;"></span><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">IrrGetFont</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_font = IrrGetFont( Filename of the bitmap font file as zstring )<br>
<br>
Description<br>
Loads a bitmap containing a bitmap font.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">BitmapFont
= IrrGetFont ( "bitmapfont.bmp" )</span></td>
</tr>
</tbody>
</table>
<span style="font-weight: bold;"></span><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: bold;">Irr2DFontDraw</span></td>
</tr>
<tr>
<td>Syntax<br>
Irr2DFontDraw ( Font Object as irr_texture, The text to display as
wstring ptr, Top X as integer, Top Y as integer, Bottom X as integer,
Bottom Y as integer)<br>
<br>
Description<br>
Draws the text into the supplied rectangular area using the supplied
font object.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">Irr2DFontDraw
( BitmapFont, "SIMPLE MONOCHROME FONT", 120, 80, 250, 96 )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrSaveScreenShot</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSaveScreenShot( filename as zstring)<br>
<br>
Description<br>
Save a screenshot out to a file, the image format is defined by the
extension applied to the filename. Irrlicht currently supports: bmp,
png, tga, ppm and jpg<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrSaveScreenShot</span><span style="font-family: monospace;">( "c:\myscreen.bmp" )</span></td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrGetScreenShot</span></td>
</tr>
<tr>
<td>Syntax<br>
texture = IrrGetScreenShot( x as uinteger, y as uinteger, width as
uinteger, height as uinteger )<br>
<br>
Description<br>
Return a pointer to a texture containing a rectangular portion of a
screenshot.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">DIM
texture as irr_texture = IrrGetScreenShot( 0,0, 256,256)</span></td>
</tr>
</tbody>
</table>
<span style="font-weight: bold;"></span><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrGetTextureInformation&nbsp;</span></td>
</tr>
<tr>
<td>Syntax<br>
texture = IrrGetTextureInformation (&nbsp;texture as
irr_texture,&nbsp;textureWidth as unsigned integer, textureHeight
as
unsigned integer, texturePitch as unsigned integer,textureFormat as
IRR_COLOR_FORMAT )<br>
<br>
Description<br>
Get information on a texture. The width, height, pitch and color format
is returned in the supplied variables.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrGetTextureInformation
( selectedTexture, width, height, pitch, col_format )</span></td>
</tr>
</tbody>
</table>
<span style="font-weight: bold;"></span><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 153, 255);"><span style="font-weight: 700;">IrrGetImageInformation&nbsp;</span></td>
</tr>
<tr>
<td>Syntax<br>
texture = IrrGetImageInformation ( image as
irr_image,&nbsp;textureWidth as unsigned integer, textureHeight as
unsigned integer, texturePitch as unsigned integer,textureFormat as
IRR_COLOR_FORMAT )<br>
<br>
Description<br>
Get information on an image. The width, height, pitch and color format
is returned in the supplied variables.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">IrrGetImageInformation&nbsp;(
selectedImage, width, height, pitch, col_format )</span></td>
</tr>
</tbody>
</table>
<span style="font-weight: bold;"></span><br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Materials"></a>Materials</h2>
Calls for creating and manipulating materials that can be applied to a
node to color and texture the object.
Basic Materials set common properties like the shininess and reflective
color of the objects. Advanced Materials use GPU programs to create
sophisticated texturing effects
that can greatly add to the realism of the scene but are only
supported by modern
graphics cards with Pixel and Vertex shader support. Currently
Irrlicht&nbsp;supports Vertex Shaders, Pixel Shaders, ARB Vertex
programs, ARB Fragment programs, HLSL (DirectX 9) and GLSL (OpenGL).<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrSetNodeAmbientColor</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeAmbientColor ( node As irr_node,&nbsp;uColor As Uinteger)<br>
<br>
Description<br>
Sets the ambient color of all materials in a node. This color value is
created with the FreeBasic RGBA call. The ambient color is a color
applied to the whole node as a simulation of&nbsp; ambient lighting
reflected from the objects around it.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeAmbientColor&nbsp;(
object_material, RGBA( 128,0,0,0 ))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrSetNodeDiffuseColor</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeDiffuseColor ( node As irr_node,&nbsp;uColor As Uinteger)<br>
<br>
Description<br>
Sets the diffuse color of all materials in a node. This color value is
created with the FreeBasic RGBA call. The diffuse color is the
indirectly lit surface colour.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeDiffuseColor&nbsp;(
object_material, RGBA( 128,0,0,0 ))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrSetNodeSpecularColor</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeSpecularColor ( node As irr_node,&nbsp;uColor As Uinteger)<br>
<br>
Description<br>
Sets the specilar color of all materials in a node. This color value is
created with the FreeBasic RGBA call. The specular color is the color
of the highlights on the node representing reflections of light sources.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeSpecularColor&nbsp;(
object_material, RGBA( 128,0,0,0 ))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrSetNodeEmissiveColor</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeEmissiveColor ( node As irr_node,&nbsp;uColor As Uinteger)<br>
<br>
Description<br>
Sets the emissive color of all materials in a node. This color value is
created with the FreeBasic RGBA call. The emissive colour is the light
'generated within' the node. Setting this to 255,255,255,255 will make
the node appear as though it has the no lighting effect applied to it.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeEmissiveColor&nbsp;(
object_material, RGBA( 128,0,0,0 ))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrSetNodeColorByVertex</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeColorByVertex ( material as
irr_material,&nbsp;affected_property as IRR_COLOR_MATERIAL
)<br>
<br>
Description<br>
Sets which aspect of all of the materials in a node is affected by the
vertex colour.<br>
<br>
affected_property can be one of: -<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_NONE<br>
&nbsp; &nbsp; Dont use vertex color for lighting<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_DIFFUSE<br>
&nbsp; &nbsp; Use vertex color for diffuse light, (the default
value)<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_AMBIENT<br>
&nbsp; &nbsp; Use vertex color for ambient light<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_EMISSIVE<br>
&nbsp; &nbsp; Use vertex color for emissive light<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_SPECULAR<br>
&nbsp; &nbsp; Use vertex color for specular light<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_DIFFUSE_AND_AMBIENT<br>
&nbsp; &nbsp; Use vertex color for both diffuse and ambient
light<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeColorByVertex&nbsp;(
object_material, ECM_NONE )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrMaterialVertexColorAffects</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrMaterialVertexColorAffects ( material as
irr_material,&nbsp;affected_property as IRR_COLOR_MATERIAL
)<br>
<br>
Description<br>
Sets which aspect of the material is affected by the vertex colour.<br>
<br>
affected_property can be one of: -<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_NONE<br>
&nbsp; &nbsp; Dont use vertex color for lighting<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_DIFFUSE<br>
&nbsp; &nbsp; Use vertex color for diffuse light, (the default
value)<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_AMBIENT<br>
&nbsp; &nbsp; Use vertex color for ambient light<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_EMISSIVE<br>
&nbsp; &nbsp; Use vertex color for emissive light<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_SPECULAR<br>
&nbsp; &nbsp; Use vertex color for specular light<br>
<br>
&nbsp;&nbsp;&nbsp; ECM_DIFFUSE_AND_AMBIENT<br>
&nbsp; &nbsp; Use vertex color for both diffuse and ambient
light<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrMaterialVertexColorAffects&nbsp;(
object_material, ECM_NONE )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrSetMaterialBlend</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMaterialBlend&nbsp;( material as irr_material, source as
IRR_BLEND_FACTOR, destination as IRR_BLEND_FACTOR
)<br>
<br>
Description<br>
Sets the source and destination surface blend
factors for the ONETEXTURE_BLEND material. This is mainly useful in
multi-pass rendering, where you render the scene to the display and
then render the scene a second time with the ONETEXTURE_BLEND material
setting which mixes the existing pixels and the new pixels using the
blend setting defined here.<br>
<br>
IRR_BLEND_FACTOR can be one of the following values: -<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_ZERO<br>
&nbsp;&nbsp;&nbsp; A fixed value of zero<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_ONE<br>
&nbsp;&nbsp;&nbsp; A fixed value of&nbsp;one<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_DST_COLOR<br>
&nbsp;&nbsp;&nbsp; The destination color<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_ONE_MINUS_DST_COLOR<br>
&nbsp;&nbsp;&nbsp; The inverted destination color<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_SRC_COLOR<br>
&nbsp;&nbsp;&nbsp; The source color<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_ONE_MINUS_SRC_COLOR<br>
&nbsp;&nbsp;&nbsp; The inverted source color<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_SRC_ALPHA<br>
&nbsp;&nbsp;&nbsp; The source alpha value<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_ONE_MINUS_SRC_ALPHA<br>
&nbsp;&nbsp;&nbsp; The inverted source alpha value<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_DST_ALPHA<br>
&nbsp;&nbsp;&nbsp; The destination alpha value<br>
<br>
&nbsp;&nbsp;&nbsp; EBF_ONE_MINUS_DST_ALPHA<br>
&nbsp;&nbsp;&nbsp; The inverted destination alpha value<br>
<br>
&nbsp;&nbsp;&nbsp;
EBF_SRC_ALPHA_SATURATE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMaterialBlend&nbsp;( object_material,
EBF_SOURCE_COLOR, EFB_DST_COLOR )</td>
</tr>
</tbody>
</table>
<span style="font-weight: 700;"></span><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrMaterialSetShininess</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrMaterialSetShininess ( material as irr_material, shininess as single
)<br>
<br>
Description<br>
Set how shiny the material is, the higher the value the more defined
the highlights.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrMaterialSetShininess ( object_material, 20.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrMaterialSetSpecularColor</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrMaterialSetSpecularColor ( material as irr_material, Alpha as
uinteger, Red as
uinteger, Green as uinteger, Blue as uinteger )<br>
<br>
Description<br>
Set the color of specular highlights on objects with this material
applied.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrMaterialSetSpecularColor ( object_material, 0, 255,
128, 128 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrMaterialSetDiffuseColor</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrMaterialSetDiffuseColor ( material as irr_material, Alpha as
uinteger, Red as uinteger,
Green as uinteger, Blue as uinteger )<br>
<br>
Description<br>
Set the color of diffuse lighting on objects with this material applied.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrMaterialSetDiffuseColor ( object_material, 0, 255,
128,
255 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrMaterialSetAmbientColor</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrMaterialSetAmbientColor ( material as irr_material, Alpha as
uinteger, Red as uinteger,
Green as uinteger, Blue as uinteger )<br>
<br>
Description<br>
Set the color of ambient light reflected by objects with this material
applied.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrMaterialSetAmbientColor ( object_material, 0, 64,
128,
255 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrMaterialSetEmissiveColor</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrMaterialSetEmissiveColor ( material as irr_material, Alpha as
uinteger, Red as
uinteger, Green as uinteger, Blue as uinteger )<br>
<br>
Description<br>
Set the color of light emitted by objects with this material applied.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrMaterialSetEmissiveColor ( object_material, 0, 64,
128,
255 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrMaterialSetMaterialTypeParam</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrMaterialSetMaterialTypeParam( material as irr_material, value as
single )<br>
<br>
Description<br>
Set material specific parameter. Used in a couple of vertex alpha and
normal mapping material types.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrMaterialSetMaterialTypeParam( object_material, 0.357
)</td>
</tr>
</tbody>
</table>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: 700;">IrrSetMaterialLineThickness</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMaterialLineThickness( material as irr_material, thickness as
single )<br>
<br>
Description<br>
Sets the line thickness of none 3D elements associated with this
material.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMaterialLineThickness( object_material, 2.0
)</td>
</tr>
</tbody>
</table>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrAddHighLevelShaderMaterial </span></td>
</tr>
<tr>
<td>Syntax<br>
irr_shader = IrrAddHighLevelShaderMaterial ( vertex_program as zstring
ptr, vertex_start_function as zstring ptr, vertex_prog_type as
uinteger, pixel_program as zstring ptr, pixel_start_function as zstring
ptr, pixel_prog_type as uinteger, material_type as uinteger )<br>
<br>
Description<br>
Creates a new material using a high level shading language.<br>
<br>
vertex program:
String containing the source of the vertex shader program. This can be
0 if
no vertex program shall be used. <br>
vertex_start_function:
Name of the entry function of the vertex shader program<br>
vertex_program_type:
Vertex shader version used to compile the GPU program<br>
pixel_program:
String containing the source of the pixel shader program. This can be 0
if
no pixel shader shall be used.<br>
pixel_start_function:
Entry name of the function of the pixel shader program<br>
pixel_program_type:
Pixel shader version used to compile the GPU program<br>
baseMaterial:
Base material which renderstates will be used to shade the material.<br>
<br>
Returns a type that contains a material_type number that can be used to
shade nodes with this new material. If the shader could not be created
it
will return 0<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>shader = IrrAddHighLevelShaderMaterial ( _<br>
&nbsp; &nbsp; vertex_program, "main", IRR_EVST_VS_1_1, _<br>
&nbsp; &nbsp; pixel_program,&nbsp;"main", IRR_EPST_PS_1_1, _<br>
&nbsp; &nbsp; IRR_EMT_SOLID )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrAddHighLevelShaderMaterialFromFiles
</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_mesh = IrrAddHighLevelShaderMaterialFromFiles (
vertex_program_filename as zstring ptr, vertex_start_function as
zstring ptr, vertex_prog_type as uinteger, pixel_program_filename as
zstring ptr, pixel_start_function as zstring ptr, pixel_prog_type as
uinteger, material_type as uinteger )<br>
<br>
Description<br>
Creates a new material using a high level shading language stored in
files.<br>
<br>
vertex program_filename:
String containing the filename of the vertex shader program. This can
be 0 if
no vertex program shall be used. <br>
vertex_start_function:
Name of the entry function of the vertex shader program<br>
vertex_program_type:
Vertex shader version used to compile the GPU program<br>
pixel_program_filename:
String containing the filename of the pixel shader program. This can be
0 if
no pixel shader shall be used.<br>
pixel_start_function:
Entry name of the function of the pixel shader program<br>
pixel_program_type:
Pixel shader version used to compile the GPU program<br>
baseMaterial:
Base material which renderstates will be used to shade the material.<br>
Returns a type that contains a material_type number that can be used to
shade nodes with this new material. If the shader could not be created
it
will return 0.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>shader = IrrAddHighLevelShaderMaterialFromFiles ( _<br>
&nbsp;&nbsp; ".\media\wood.vertex",&nbsp;"main",
IRR_EVST_VS_1_1, _<br>
&nbsp;&nbsp; ".\media\wood.pixel",&nbsp;"main",
IRR_EPST_PS_1_1, _<br>
&nbsp;&nbsp; IRR_EMT_SOLID )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrAddShaderMaterial </span></td>
</tr>
<tr>
<td>Syntax<br>
irr_shader = IrrAddShaderMaterial ( vertex_program as zstring ptr,
pixel_program as zstring ptr, material_type as uinteger )<br>
<br>
Description<br>
Creates a new material using a shading language program stored in a
string.<br>
<br>
vertex program:
String containing the source of the vertex shader program. This can be
0 if
no vertex program shall be used. For DX8 programs, the will always
input
registers look like this: v0: position, v1: normal, v2: color, v3:
texture
cooridnates, v4: texture coordinates 2 if available. For DX9 programs,
you
can manually set the registers using the dcl_ statements.<br>
pixel_program:
String containing the source of the pixel shader program. This can be 0
if
no pixel shader shall be used.<br>
baseMaterial:
Base material which renderstates will be used to shade the material.<br>
<br>
Return:
Returns a type that contains a material_type number that can be used to
shade nodes with this new material. If the shader could not be created
it
will return 0<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>shader = IrrAddShaderMaterial ( vertex_program,
pixel_program, IRR_EMT_SOLID )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrAddShaderMaterialFromFiles </span></td>
</tr>
<tr>
<td>Syntax<br>
irr_shader = IrrAddShaderMaterialFromFiles ( vertex_program_filename as
zstring ptr, pixel_program_filename as zstring ptr, material_type as
uinteger )<br>
<br>
Description<br>
Creates a new material using a shading language program stored in files.<br>
<br>
vertex program:
String containing the source of the vertex shader program. This can be
0 if
no vertex program shall be used. For DX8 programs, the will always
input
registers look like this: v0: position, v1: normal, v2: color, v3:
texture
cooridnates, v4: texture coordinates 2 if available. For DX9 programs,
you
can manually set the registers using the dcl_ statements.<br>
pixel_program:
String containing the source of the pixel shader program. This can be 0
if
no pixel shader shall be used.<br>
baseMaterial:
Base material which renderstates will be used to shade the material.<br>
Return:
Returns a type that contains a material_type number that can be used to
shade nodes with this new material. If the shader could not be created
it
will return 0<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>shader = IrrAddShaderMaterialFromFiles (
".\media\wood_low.vtx", ".\media\wood_low.pxl" IRR_EMT_SOLID )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrCreateNamedVertexShaderConstant
</span></td>
</tr>
<tr>
<td>Syntax<br>
result = IrrCreateNamedVertexShaderConstant ( shader as IRR_SHADER,
const_name as zstring ptr, const_preset as integer, const_data as
single, data_count as integer )<br>
<br>
Description<br>
Creates a Vertex shader constant that allows you to change the value of
a
constant inside a&nbsp;shader during the execution of the program,
simply
assign one of the preset constants to the constant name or attach the
constant
to an array of floats and change the constant simply by changing the
values
in your array<br>
<br>
Returns: 1 if the constant was sucessfully created<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrCreateNamedVertexShaderConstant ( shader, "Time",
byval IRR_NO_PRESET, @time, 1 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrCreateNamedPixelShaderConstant
</span></td>
</tr>
<tr>
<td>Syntax<br>
result = IrrCreateNamedPixelShaderConstant ( shader as IRR_SHADER,
const_name as zstring ptr, const_preset as integer, const_data as
single, data_count as integer )<br>
<br>
Description<br>
Creates a Pixel shader constant that allows you to change the value of
a
constant inside a&nbsp;shader during the execution of the program,
simply
assign one of the preset constants to the constant name or attach the
constant
to an array of floats and change the constant simply by changing the
values
in your array<br>
<br>
Returns: 1 if the constant was sucessfully created<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>dim color(4) as Single =&gt; { 1.0, 1.0, 1.0, 1.0 }<br>
IrrCreateNamedPixelShaderConstant ( shader, "color", IRR_NO_PRESET,
@color, 4 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrCreateAddressedVertexShaderConstant
</span></td>
</tr>
<tr>
<td>Syntax<br>
result = IrrCreateAddressedVertexShaderConstant ( shader as
IRR_SHADER, const_address as integer, const_preset as integer,
const_data as single, data_count as integer )<br>
<br>
Description<br>
Creates a Vertex shader constant that allows you to change the value of
a
constant inside a&nbsp;shader during the execution of the program,
simply
assign one of the preset constants to the constant name or attach the
constant
to an array of floats and change the constant simply by changing the
values
in your array<br>
<br>
Returns: 1 if the constant was sucessfully created<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrCreateAddressedVertexShaderConstant ( shader, 4,
IRR_NO_PRESET, @time, 1 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrCreateAddressedPixelShaderConstant
</span></td>
</tr>
<tr>
<td>Syntax<br>
result = IrrCreateAddressedPixelShaderConstant ( shader as
IRR_SHADER, const_address as integer, const_preset as integer,
const_data as single, data_count as integer )<br>
<br>
Description<br>
Creates a Pixel shader constant that allows you to change the value of
a
constant inside a&nbsp;shader during the execution of the program,
simply
assign one of the preset constants to the constant name or attach the
constant
to an array of floats and change the constant simply by changing the
values
in your array<br>
<br>
Returns: 1 if the constant was sucessfully created<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>dim position(3) as Single =&gt; { 0.0, 0.0, 0.0 }<br>
IrrCreateAddressedPixelShaderConstant ( shader, 2, IRR_NO_PRESET,
@position, 3 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsStart
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsStart (&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vsm as integer = IRR_OFF,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
softShadows as integer =&nbsp;IRR_OFF,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
bitdepth32 as integer =&nbsp;IRR_OFF )<br>
<br>
Description<br>
Starts the XEffects advanced shader extension
provided by Bitplane from the Irrlicht Forums. This must be called
before any other XEffects calls.<br>
<br>
The first parameter 'vsm' is
used to turn on the 'Variance Shadow Maps' feature. VSM is an advanced
form of shading used to avoid aliasing problems that can be seen with
the other shadowing function. It can create clear sharp shadowing. Use
IRR_ON to enable this feature.<br>
<br>
The second parameter 'soft
shadows' provides blurred shadows, similar as those cast by a large
source. Use IRR_ON to enable this feature.<br>
<br>
The last parameter
'bit depth 32' enables 32 bit buffers for the internal processes. While
this will use more video memory it can produce improved results.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsStart ( IRR_OFF, IRR_ON )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsEnableDepthPass
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsEnableDepthPass(&nbsp;enable as integer )<br>
<br>
Description<br>
Enables a depth rendering pass. This is required for shaders that rely
on depth information. Use IRR_ON to enable the function.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsEnableDepthPass&nbsp;( IRR_ON )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsAddPostProcessingFromFile
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsAddPostProcessingFromFile( name as zstring ptr,&nbsp;
effectType as integer = 0 )<br>
<br>
Description<br>
Adds
a shader feature to the display from a GLSL or HLSL program stored in a
file. Shaders do need some programming support so only the XEffects
Shaders are supported through the XEffects calls.<br>
<br>
The first
parameter is the path and file name for the shader program. If you are
operating in OpenGL you should use the GLSL extension and when
operating in DirectX you shouhld use the HLSL extension.<br>
<br>
The second parameter can usually be omitted or set to 0.&nbsp;Only
when loading the SSAO shader (<span style="font-weight: bold;">not</span>
the SSAO composite shader) should it be set to 1.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsAddPostProcessingFromFile&nbsp;(
"./media/shaders/ssao.glsl", 1 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsSetPostProcessingUserTexture
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsSetPostProcessingUserTexture( texture as irr_texture )<br>
<br>
Description<br>
Sets
the user defined post processing texture. This is used internally for
the SSAO shader but is used primarily for the water shader where it
defines the specular surface pattern of the water.<br>
<br>
You can change the texture through a sequence of images to produce an
animated effect.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsSetPostProcessingUserTexture&nbsp;(
waterTexture(i))<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsAddShadowToNode
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsAddShadowToNode( node as irr_node,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
filterType as E_FILTER_TYPE = EFT_NONE,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
shadowType as E_SHADOW_MODE = ESM_BOTH )<br>
<br>
Description<br>
Adds the shadowing effect to a node. This controls both recieving and
casting shadows.<br>
<br>
The
filterType defines the amount of sampling that is to be carried out on
the node. This can be one of the following settings, increasing the
filter increases the quality and also the cost of rendering.<br>
<br>
&nbsp;&nbsp;&nbsp; EFT_NONE<br>
&nbsp;&nbsp;&nbsp; EFT_4PCF<br>
&nbsp;&nbsp;&nbsp; EFT_8PCF<br>
&nbsp;&nbsp;&nbsp; EFT_12PCF<br>
&nbsp;&nbsp;&nbsp; EFT_16PCF<br>
<br>
The shadow type specifies the type of shadowing applied to the node.
This can be set to one of the following settings: -<br>
<br>
&nbsp;&nbsp;&nbsp; ESM_RECEIVE<br>
&nbsp;&nbsp;&nbsp; ESM_CAST<br>
&nbsp;&nbsp;&nbsp; ESM_BOTH<br>
&nbsp;&nbsp;&nbsp; ESM_EXCLUDE<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsAddShadowToNode&nbsp;( roomNode )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsRemoveShadowFromNode
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsRemoveShadowFromNode( node as irr_node )<br>
<br>
Description<br>
Removes the shadowing effect from a node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsRemoveShadowFromNode&nbsp;( roomNode )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsExcludeNodeFromLightingCalculations
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsExcludeNodeFromLightingCalculations( node as irr_node )<br>
<br>
Description<br>
Excludes a node from shadowing calculations.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsExcludeNodeFromLightingCalculations&nbsp;(
particleNode )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsAddNodeToDepthPass
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsAddNodeToDepthPass( node as irr_node )<br>
<br>
Description<br>
Adds a node to the list of nodes used for calculating the depth pass.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsAddNodeToDepthPass&nbsp;( barrierNode )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsSetAmbientColor
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsSetAmbientColor(&nbsp;R as uinteger,&nbsp;G as
uinteger,&nbsp;B as uinteger,&nbsp;Alpha as uinteger )<br>
<br>
Description<br>
Sets the ambient lighting procuded in the scene by the XEffects system.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsSetAmbientColor&nbsp;( 32,32,32,0 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsSetClearColor
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsSetClearColor(&nbsp;R as uinteger,&nbsp;G as
uinteger,&nbsp;B as uinteger,&nbsp;Alpha as uinteger )<br>
<br>
Description<br>
The
XEffects system uses a different background color to the one specified
in the IrrBeginScene call use this call to set this default background
color.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsSetClearColor&nbsp;( 255,250,32,0 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsAddShadowLight
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsAddShadowLight(&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;shadowDimen as
uinteger,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;posX as single, byVal posY as
single, byVal posZ as single,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;targetX as single, byVal
targetY as single, byVal targetZ as single,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;R as single, byval G as single,
byval B as single, byval Alpha as single,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;lightNearDist as single, byval
lightFarDist as single,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;angleDegrees as single )<br>
<br>
Description<br>
Adds
a special dynamic shadow casting light to the scene, for each of these
lights that you add there is a seperate shadow map created and a
seperate render pass so for each light you add the scene takes more
memory and gets slower.<br>
<br>
The first parameter specifies the shadow
map resolution for the shadow light. The shadow map is always square,
so you need only pass 1 dimension, preferably a power of two between
512 and 2048, maybe larger depending on your quality requirements and
target hardware.<br>
The pos parameters specify the lights initial position<br>
The target parameters is the (look at) target for the light<br>
The color setting are the floating point color intensity values of the
light<br>
The near and far distance of the light&nbsp;are very important
values for determining the reach of the light.<br>
The
last parameter is the FOV (Field of view), since the light is similar
to a spot light, the field of view will determine its area of
influence. Anything that is outside of a lights frustum (Too close, too
far, or outside of it's field of view) will be unlit by this particular
light, similar to how a spot light works.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsAddShadowLight ( 512, 200,200,0, 0,0,0, _<br>
&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; 0.7,0.7,0.6,0.0, 1.0, 1200.0, 89.99 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsSetShadowLightPosition
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsSetShadowLightPosition(&nbsp;lightIndex as
uinteger,&nbsp;<br>
&nbsp;&nbsp;&nbsp; posX as single, byVal posY as single,
byVal posZ as single )<br>
<br>
Description<br>
Set the position of a shadow light. the index refers to the numerical
order in which the lights were added.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsSetShadowLightPosition&nbsp;( 0,
200,200,0 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsGetShadowLightPosition
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsGetShadowLightPosition(&nbsp;lightIndex as
uinteger,&nbsp;<br>
&nbsp;&nbsp;&nbsp; posX as single, byVal posY as single,
byVal posZ as single )<br>
<br>
Description<br>
Get the position of a shadow light. the index refers to the numerical
order in which the lights were added.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsGetShadowLightPosition&nbsp;( 0, x, y, z
)<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsSetShadowLightTarget
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsSetShadowLightTarget(&nbsp;lightIndex as
uinteger,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;targetX as single, byVal
targetY as single, byVal targetZ as single )<br>
<br>
Description<br>
Set the target location of a shadow light. the index refers to the
numerical order in which the lights were added.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsSetShadowLightTarget&nbsp;( 0, 25,15,0 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsGetShadowLightTarget
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsGetShadowLightTarget(&nbsp;lightIndex as
uinteger,&nbsp;<br>
&nbsp;&nbsp;&nbsp;targetX as single, byVal targetY as
single, byVal targetZ as single )<br>
<br>
Description<br>
Get the target location of a shadow light. the index refers to the
numerical order in which the lights were added.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsGetShadowLightTarget&nbsp;( 0, x, y, z )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsSetShadowLightColor
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsSetShadowLightColor(&nbsp;lightIndex as
uinteger,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;R as single, byval G as single,
byval B as single, byval Alpha as single )<br>
<br>
Description<br>
Set the target location of a shadow light. the index refers to the
numerical order in which the lights were added.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsSetShadowLightColor&nbsp;( 0, 1.0, 0.75,
0.2, 0.0 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(204, 255, 255);"><span style="font-weight: bold;">IrrXEffectsGetShadowLightColor
</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrXEffectsGetShadowLightColor(&nbsp;lightIndex as
uinteger,&nbsp;<br>
&nbsp;&nbsp;&nbsp;R as single, byval G as single, byval B
as single, byval Alpha as single )<br>
<br>
Description<br>
Get the target location of a shadow light. the index refers to the
numerical order in which the lights were added.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrXEffectsGetShadowLightColor&nbsp;( 0, r, g, b, a
)<br>
</td>
</tr>
</tbody>
</table>
<span style="font-weight: bold;"></span><br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Scene"></a>Scene</h2>
Calls for managing the scene, loading and creating mesh objects and
then adding them to the scene as nodes to be rendered on the screen.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrGetRootSceneNode</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrGetRootSceneNode(&nbsp; )<br>
<br>
Description<br>
Gets the scenes root node, <span style="font-weight: bold;">all</span>
scene nodes are children of this node<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>TheScene = IrrGetRootSceneNode()</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrGetMesh</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_mesh = IrrGetMesh( Filename of the mesh object to load as zstring )<br>
<br>
Description<br>
Loads the specified mesh ready to be added to the scene. The Irrlicht
engine supports a wide range of mesh types including BSP, MD2, 3DS,
Direct X, etc...<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DolphinMesh = IrrGetMesh( "Dolphin.x" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrCreateMesh</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrCreateMesh ( mesh_name as zstring ptr, vertex_count as
integer, vertices as IRR_VERT, indices_count as integer, indices as
ushort) as irr_mesh<br>
<br>
Description<br>
Create a new mesh. You must supply a list of vertices of type IRR_VECT
and an array of indices that refer to these vertices. The indices are
taken in groups of three joining up the dots defined by the veticies
and forming a collection of triangles.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>PyramidMesh = IrrCreateMesh( "Pyramid", 5, vertices(0),
18, indicies(0))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: 700;">IrrAddHillPlaneMesh</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrAddHillPlaneMesh ( mesh_name As zString Ptr, tileSizeX As Single,
tileSizeY As Single, tileCountX As Integer, tileCountY As Integer,
material As uInteger Ptr = 0, hillHeight As Single = 0, countHillsX As
Single = 0, countHillsY As Single = 0, textureRepeatCountX As Single =
1, textureRepeatCountY As Single = 1 ) as irr_mesh<br>
<br>
Description<br>
Creates a hill plane mesh that represents a simple terrain. Many
properties have default values allowing a mesh to be created with a
simple call<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>TerrainMesh = IrrAddHillPlaneMesh( "Terrain", 1.0, 1.0,
10, 10 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: 700;">IrrWriteMesh</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrWriteMesh( mesh as irr_mesh, file_format as IRR_MESH_FILE_FORMAT,
save_filename as zstring ) as uinteger<br>
<br>
Description<br>
Write the first frame of the supplied animated mesh out to a file using
the specified file format. The following file formats are supported by
Irrlicht: -
<p>Irrlicht Native mesh writer, for static .irrmesh files.<br>
EMWT_IRR_MESH </p>
<p>COLLADA mesh writer for .dae and .xml files. <br>
EMWT_COLLADA</p>
<p>STL mesh writer for .stl files.<br>
EMWT_STL <br>
&nbsp;</p>
<p>The function will return the follow error codes: -</p>
<p>(0) Could not get mesh writer object<br>
(1) Could not open file<br>
(2) Unable to write the mesh to the file<br>
(3) Successfully wrote file<br>
<br>
Example</p>
</td>
</tr>
<tr style="font-family: monospace;">
<td>if IrrWriteMesh( custom_mesh, EMWT_IRR_MESH,
"mymesh.irr" ) = 3<br>
&nbsp;&nbsp;&nbsp; ? "Wrote the mesh to file successfully"</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrRemoveMesh</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveMesh( mesh as irr_mesh )<br>
<br>
Description<br>
Removes a mesh from the scene cache, freeing up resources.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveMesh( my_mesh )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrRenameMesh</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrRenameMesh( mesh as irr_mesh, name as zstring ptr )<br>
<br>
Description<br>
Rename a loaded mesh through the scene cache, the mesh can then
subsequently be loaded again as a different mesh<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRenameMesh( my_mesh, "New Name" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: 700;">IrrClearUnusedMeshes</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrClearUnusedMeshes()<br>
<br>
Description<br>
Clears all meshes that are held in the mesh cache but not used anywhere
else. Any references to these meshes will become invalid.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrClearUnusedMeshes()</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetMeshHardwareAccelerated</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMeshHardwareAccelerated ( mesh as irr_mesh, frame number as
integer ) <br>
<br>
Description<br>
Set the supplied mesh as a Hardware Accelerated object, this offloads
the
verticies and indicies to hardware support on the graphics card, making
the process of rendering those meshes much faster. The feature must be
supported on the graphics card and the object must contain over 500
vertices for the operation to be successful.
This operation is applied to all mesh buffers in the mesh.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMeshHardwareAccelerated( ShipMesh, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrCreateBatchingMesh</td>
</tr>
<tr>
<td>Syntax<br>
IrrCreateBatchingMesh ( ) <br>
<br>
Description<br>
Create a batching mesh that will be a collection
of other meshes into a single source mesh. The function of the batching
mesh is to avoid the use of large numbers of nodes that adds an
overhead to the rendering process that can significantly slow it down.
Where you have a forest with a thousand trees you will see a
significant increase in performance by batching all of those trees into
a smaller number of node.<br>
<br>
Returns: A bactching mesh, while this is handled as an irr_mesh it
should only be used with batching mesh commands.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>batchingMesh = IrrCreateBatchingMesh( )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddToBatchingMesh</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddToBatchingMesh (<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
meshBatch as irr_mesh,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mesh as irr_mesh,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
posX as single = 0.0f, posY as single = 0.0f, posZ as single =
0.0f,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rotX as single = 0.0f, rotY as single = 0.0f, rotZ as single =
0.0f,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
scaleX as single = 1.0f, scaleY as single = 1.0f, scaleZ as single =
1.0f )<br>
<br>
Description<br>
Adds a mesh to the batching mesh at the specified
position, rotation and scale. If each of your meshes requires a
different texture you should call IrrSetMeshMaterialTexture for the
mesh you are about to add prior to adding the mesh to the batch.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrAddToBatchingMesh( batchingMesh, treeMesh )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrFinalizeBatchingMesh</td>
</tr>
<tr>
<td>Syntax<br>
IrrFinalizeBatchingMesh ( mesh as irr_mesh, frame number as
integer ) <br>
<br>
Description<br>
Finalises the batching mesh, this should be called
once all of the meshes have been added to the batching mesh. The
function returns a new mesh object that can be used in all standard
mesh calls..<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Dim as irr_mesh newMesh = IrrFinalizeBatchingMesh(
BatchingMesh )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetMeshFrameCount</td>
</tr>
<tr>
<td>Syntax<br>
integer = IrrGetMeshFrameCount ( mesh as irr_mesh )<br>
<br>
Description<br>
Gets the number of frames in the supplied mesh.You can use this value
to traverse the indicies and vertices in a mesh containing a number of
frames.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MeshFrameCount = IrrGetMeshFrameCount( WolfMesh )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetMeshBufferCount</td>
</tr>
<tr>
<td>Syntax<br>
integer = IrrGetMeshBufferCount ( mesh as irr_mesh, frame
number as integer )<br>
<br>
Description<br>
Gets the number of mesh buffers in the supplied mesh.You can use this
value
to traverse the indicies and vertices in a mesh containing a number of
mesh buffers. If
the mesh is animated frame number indicates the number of the frame to
recover mesh data for if it is not animated this value should be set to
0.<br>
<br>
Most
meshes only contain one mesh buffer however the artist creating the
mesh may decide to break the mesh up into a number of groups of meshes,
for example a house might have a roof mesh buffer and a walls mesh
buffer.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MeshBufferCount = IrrGetMeshBufferCount( TankMesh, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetMeshIndexCount</td>
</tr>
<tr>
<td>Syntax<br>
integer =&nbsp;IrrGetMeshIndexCount ( mesh as irr_mesh, frame
number as integer, mesh_buffer as integer )<br>
<br>
Description<br>
Gets the number of Indicies in the supplied mesh.You can use this value
to allocate an array for reading out the list of indicies in a mesh. If
the mesh is animated frame number indicates the number of the frame to
recover mesh data for if it is not animated this value should be set to
0. If the mesh contains a number of mesh buffers you can specific which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MeshIndexCount =&nbsp;IrrGetMeshIndexCount(
MapMesh, 0,0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetMeshIndices</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetMeshIndices (&nbsp;mesh as irr_mesh, frame number as integer
,&nbsp;indicies as ushort, mesh_buffer as integer )<br>
<br>
Description<br>
Gets the list of indices in a mesh and copies them into the supplied
buffer. Each index references a vertex in the mesh the indices are
grouped into three's and together form a triangular surface. If the
mesh is animated frame number indicates the number of the frame
to recover mesh data for if it is not animated this value should be set
to 0. If the mesh contains a number of mesh buffers you can specific
which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Indices should be the first element of an array or the first integer in
a pool of allocated memory, it is passed into the wrapper by reference
as a pointer. You must ensure that the array you supply is large enough
to contain all of the indices otherwise an overflow will occur and
memory will be corrupted.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetMeshIndices( MapMesh, 0, Indicies(0),0)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetMeshIndices</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMeshIndices( mesh as irr_mesh, frame number as integer , indicies
as ushort, mesh_buffer as integer )<br>
<br>
Description<br>
This sets the value of the list of indicies in a mesh copying them from
the supplied buffer. Each index
references a vertex in the mesh the indices are grouped into three's
and together form a triangular surface. If the mesh is animated frame
number indicates the number of the frame
to recover mesh data for if it is not animated this value should be set
to 0. If the mesh contains a number of mesh buffers you can specific
which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Indices should be the
first element of an array or the first integer in a pool of allocated
memory, it is passed into the wrapper by reference as a pointer. You
must ensure that the array you supply is large enough to contain all of
the indices otherwise an overflow will occur and erroneous values will
be written into the mesh causing unpredictable results.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMeshIndices( MapMesh, 0, Indicies(0),0)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetMeshVertexCount</td>
</tr>
<tr>
<td>Syntax<br>
integer =&nbsp;IrrGetMeshVertexCount ( mesh as irr_mesh, frame
number as integer, mesh_buffer as integer )<br>
<br>
Description<br>
Gets
the number of Vertices in the supplied mesh.You can use this value to
allocate an array for reading out the list of vertices in a mesh. If
the mesh is animated frame number indicates the number of the frame
to recover mesh data for if it is not animated this value should be set
to 0. If the mesh contains a number of mesh buffers you can specific
which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Example </td>
</tr>
<tr style="font-family: monospace;">
<td>MeshVertexCount =&nbsp;IrrGetMeshVertexCount(
MapMesh, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetMeshVertexMemory</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetMeshVertexMemory (&nbsp;mesh as irr_mesh, frame number as
integer
,&nbsp;mesh_buffer as integer )<br>
<br>
Description<br>
Get a memory pointer to the vertex memory for the
supplied mesh operations can be carried out very quickly on vertices
through this function but object sizes and array access needs to be
handled by the caller.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Dim as IRR_VERT verts = IrrGetMeshVertexMemory(
MapMesh, 0, 0)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetMeshVertices</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetMeshVertices (&nbsp;mesh as irr_mesh, frame number as integer
, vertices as IRR_VERT, mesh_buffer as integer )<br>
<br>
Description<br>
Gets
the list of vertices in a mesh and copies them into the supplied
buffer.
Each vertex represents a point in the mesh that is the corner of one of
the grou pof triangles that is used to construct the mesh. If the mesh
is animated frame number indicates the number of the frame
to recover mesh data for if it is not animated this value should be set
to 0. If the mesh contains a number of mesh buffers you can specific
which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Vertices should
be the first element of an array or the first IRR_VERT structure in a
pool of
allocated memory, it is passed into the wrapper by reference as a
pointer. You must ensure that the array you supply is large enough to
contain all of the vertices otherwise an overflow will occur and memory
will be corrupted.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetMeshVertices( MapMesh, 0, Verticies(0), 0)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetMeshVertices</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMeshVertices( mesh as irr_mesh, frame number as integer ,
indicies as IRR_VERT, mesh_buffer as integer )<br>
<br>
Description<br>
This sets the value of the list of vertices in a mesh copying them
from the supplied buffer.&nbsp;Each vertex represents a point in
the
mesh that is the corner of one of
the grou pof triangles that is used to construct the mesh. If the mesh
is animated frame number indicates the number of the frame
to recover mesh data for if it is not animated this value should be set
to 0. If the mesh contains a number of mesh buffers you can specific
which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Vertices should be the
first element of an array or the first&nbsp;IRR_VERT structure in a
pool of allocated
memory, it is passed into the wrapper by reference as a pointer. You
must ensure that the array you supply is large enough to contain all of
the vertices otherwise an overflow will occur and erroneous values will
be written into the mesh causing unpredictable results.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMeshVertices( MapMesh, 0, Vertices(0), 0)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetNodeMesh</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeMesh (&nbsp;node as irr_node,&nbsp;mesh as irr_mesh )<br>
<br>
Description<br>
Sets the mesh used by a node creaed from a mesh model.<br>
<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeMesh(
BuildingNode, LowDetailMesh )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrScaleMesh</td>
</tr>
<tr>
<td>Syntax<br>
IrrScaleMesh( mesh as irr_mesh, scale as single, frame number as
integer = 0,
mesh_buffer as integer = 0, source mesh as irr_mesh = 0 )<br>
<br>
Description<br>
Scales the verticies in a mesh without affecting
the normals, tangents or texture co-ordinates. This is particularly
useful for enlarging a mesh without affecting lighting. It should be
noted though that scaling the mesh will scale all of the nodes that use
it as their source. The scaling is applied unformly to all axis.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrScaleMesh( StatueMesh, 2.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetMeshMaterialTexture</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMeshMaterialTexture(&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
mesh as irr_mesh,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
byval texture as irr_texture,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
byval material_index as integer,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
byval buffer as integer = 0 )<br>
<br>
Description<br>
Apply the supplied texture the specified mesh.
Upto four textures can be applied to the material by applying them to
different material indicies, these textures&nbsp;can be used
by&nbsp;
materials or shader functions. Setting a mesh texture will apply the
texture to all nodes that use that mesh it can also used for texturing
a mesh before it is added to a batch mesh.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMeshMaterialTexture( StatueMesh, stoneTexture, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetMeshVertexColors</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMeshVertexColors( mesh as irr_mesh, frame number as integer ,
vertexColour as uinteger
ptr, vertexGroupStartIndicies as uinteger ptr, vertexGroupEndIndicies
as uinteger ptr, numberOfGroups as uinteger, mesh_buffer as integer )<br>
<br>
Description<br>
This sets the color of groups of verticies in a mesh. You can define
any number of groups of verticies and set the color of those group
invividually. If the mesh
is animated frame number indicates the number of the frame
to recover mesh data for if it is not animated this value should be set
to 0. If the mesh contains a number of mesh buffers you can specific
which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DIM color(0 to 2) as uinteger<br>
color(0) = RGBA(255,0,0,0)<br>
color(1) = RGBA(255,0,0,0)<br>
color(2) = RGBA(255,0,0,0)<br>
DIM start as uinteger = 0<br>
DIM end as uinteger = 2<br>
IrrSetMeshVertexColors( MapMesh, 0, @color, @start, @end, 1, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetMeshVertexCoords</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMeshVertexCoords( mesh as irr_mesh, frame number as integer ,
vertexCoordinates as IRR_VECTOR Ptr, vertexGroupStartIndicies as
uinteger ptr, vertexGroupEndIndicies as uinteger ptr, numberOfGroups as
uinteger, mesh_buffer as integer )<br>
<br>
Description<br>
This sets the co-ordinates&nbsp;of groups of verticies in a mesh.
You can define any number of groups
of verticies and set the color of those group invividually. If the mesh
is animated frame number indicates the number of the frame
to recover mesh data for if it is not animated this value should be set
to 0. If the mesh contains a number of mesh buffers you can specific
which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DIM pos(0 to 2) as&nbsp;IRR_VECTOR<br>
pos(0).x = 0 : pos(0).y = 0 : pos(0).z = 0<br>
pos(1).x = 1 : pos(1).y = 0 : pos(1).z = 0<br>
pos(2).x = 0 : pos(2).y = 1 : pos(2).z = 0<br>
DIM start as uinteger = 0<br>
DIM end as uinteger = 2<br>
IrrSetMeshVertexCoords( MapMesh, 0, @color, @start, @end, 1, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetMeshVertexSingleColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMeshVertexSingleColor( mesh as irr_mesh, frame number as integer
,
vertexColour as uinteger
ptr, vertexGroupStartIndicies as uinteger ptr, vertexGroupEndIndicies
as uinteger ptr, numberOfGroups as uinteger, mesh_buffer as integer )<br>
<br>
Description<br>
This sets the color of groups of verticies in a mesh. You can define
any number of groups of verticies and set the color of those group
invividually. If the mesh
is animated frame number indicates the number of the frame
to recover mesh data for if it is not animated this value should be set
to 0. If the mesh contains a number of mesh buffers you can specific
which
mesh buffer you want to access, if you omit this parameter mesh buffer
0 will be used.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DIM start as uinteger = 0<br>
DIM end as uinteger = 2<br>
IrrSetMeshVertexSingleColor( MapMesh, 0, RGBA(255,255,255,255), @start,
@end, 1, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetMeshBoundingBox</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetMeshBoundingBox( mesh as irr_mesh, min X as single,&nbsp;min
Y as
single, min Z as single, min X as single,&nbsp;min Y as single, min
Z
as single )<br>
<br>
Description<br>
Gets the bounding box of a mesh into the supplied
variables, the six paramters define the corners of an axis aligned cube
&nbsp;that contains the whole mesh.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetMeshBoundingBox( MapMesh, topX, topY, topZ,
bottomX, bottomY, bottomZ )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddMeshToScene</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddMeshToScene( Mesh object as irr_mesh )<br>
<br>
Description<br>
Adds a mesh to the scene as a new 3D 'node'.<br>
<br>
Example<br>
</td>
</tr>
<tr style="font-family: monospace;">
<td>DolphinMesh = IrrGetMesh( "Dolphin.x" )<br>
SceneNode = IrrAddMeshToScene( DolphinMesh )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddMeshToSceneAsOcttree</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddMeshToSceneAsOcttree ( Mesh object as irr_mesh )<br>
<br>
Description<br>
Adds a mesh to the scene as a new 3D 'node'. This method optimise's the
mesh with an Octtree, this is particularly useful for maps where there
is a lot of geometry in the mesh but little of it can be seen at any
one time. Optimizing your node with this function will result in a
large increase in performance.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MapMesh = IrrGetMesh( "ctfblue.bsp" )<br>
MapNode = IrrAddMeshToSceneAsOcttree( MapMesh )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddStaticMeshForNormalMappingToScene</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddStaticMeshForNormalMappingToScene( Mesh object as
irr_mesh )<br>
<br>
Description<br>
Adds a mesh to the scene as a static object, the mesh is altered so
that it is suitable for the application of a Normal or Parallax mapping
material, any animation information is lost.<br>
<br>
Example<br>
</td>
</tr>
<tr style="font-family: monospace;">
<td>StoneRoomMesh = IrrGetMesh( "StoneRoom.x" )<br>
SceneNode = IrrAddStaticMeshForNormalMappingToScene( StoneRoomMesh )<br>
IrrSetNodeMaterialTexture( SceneNode, colorMap, 0 )<br>
IrrSetNodeMaterialTexture( SceneNode, normalMap, 1 )<br>
IrrMaterialSetSpecularColor( IrrGetMaterial( SceneNode ), 0, 0, 0 )<br>
IrrSetNodeMaterialType( SceneNode, EMT_PARALLAX_MAP_SOLID )<br>
' adjust the height of the paralax effect<br>
IrrMaterialSetMaterialTypeParam( IrrGetMaterial( SceneNode ), 0.035f )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: 700;">IrrLoadScene</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrLoadScene ( file_name As zString Ptr )<br>
<br>
Description<br>
Loads all meshes and creates nodes for a scene defined within a file
created by IrrEdit.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrLoadScene( "Map1.irr" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: 700;">IrrSaveScene</span></td>
</tr>
<tr>
<td>Syntax<br>
IrrSaveScene ( file_name As zString Ptr )<br>
<br>
Description<br>
Saves the current scene into a file that can be loaded by irrEdit.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSaveScene( "MyScene.irr" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: 700;">IrrGetSceneNodeFromId</span></td>
</tr>
<tr>
<td>Syntax<br>
Irr_node = IrrGetSceneNodeFromId( id as integer )<br>
<br>
Description<br>
Get a scene node based on its ID and returns null if no node is found.
This is particularly useful for obtaining references to nodes created
automatically when using IrrLoadScene.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrNode = IrrGetSceneNodeFromId( 15 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: 700;">IrrGetSceneNodeFromName</span></td>
</tr>
<tr>
<td>Syntax<br>
Irr_node = IrrGetSceneNodeFromId( id as zstring ptr )<br>
<br>
Description<br>
Get a scene node based on its name and returns null if no node is
found. This is particularly useful for obtaining references to nodes
created automatically when using IrrLoadScene.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrNode = IrrGetSceneNodeFromName( "Box" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrAddBillBoardToScene</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddBillBoardToScene ( X size of the node as integer, Y
size of the node as integer, X position as integer, Y position as
integer, Z position as integer)<br>
<br>
Description<br>
Adds a billboard to the scene of the specified size and at the
specified position. A billboard is a flat 3D textured sprite that
always faces towards the camera. You need to texture this element with
a separate command.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Billboard = IrrAddBillBoardToScene( 10.0,8.0, 0,0,0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrSetBillBoardColor</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrSetBillBoardColor (&nbsp;node as
irr_node,&nbsp;topColor as uinteger,&nbsp;bottomColor as
integer )<br>
<br>
Description<br>
Set the color of the top and bottom verticies in a
billboard applying a vertical graduated shade to it. The colors
&nbsp;should be generated with the FreeBasic RGBA function<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetBillBoardColor( Billboard, RGBA(255,255,255,255),
RGBA(0,0,0,0))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrSetBillBoardSize</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrSetBillBoardSize (&nbsp;node as
irr_node,&nbsp;BillWidth as single,&nbsp;BillHeight as single )<br>
<br>
Description<br>
Adds a billboard to the scene of the specified size and at the
specified position. A billboard is a flat 3D textured sprite that
always faces towards the camera. You need to texture this element with
a separate command.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetBillBoardSize( Billboard, 10.0, 8.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(153, 255, 153);"><span style="font-weight: bold;">IrrAddBillboardTextSceneNode</span></td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddBillboardTextSceneNode ( font as irr_font, text as
wstring, X size of the node as integer, Y
size of the node as integer, X position as integer, Y position as
integer, Z position as integer, parent as irr_node, topColor as
uinteger, bottomColor as uinteger )<br>
<br>
Description<br>
Adds a text billboard to the scene of the specified size and at the
specified position. A text billboard is a flat 3D textured sprite that
always faces towards the camera and has the supplied text written onto
it. You should not texture this element.<br>
<br>
font defines the font that is used to generate the text.<br>
<br>
text is a wide character string containing the text you want to display
on the billboard.<br>
<br>
X_size and Y_size define the width and height of the billboard<br>
<br>
X, Y and Z define the position of the billboard.<br>
<br>
Parent defines the object that is the parent to this billboard, if
there is no parent this should be set to IRR_NO_OBJECT<br>
<br>
topColor is the colour value of the top of the text on the billboard.
This can be created with hte RGBA command.<br>
<br>
bottomColor is the colour value of the bottom of the text on the
billboard. This can be created with hte RGBA command.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Billboard = IrrAddBillboardTextSceneNode( _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
font, "Hello World", _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
64.0, 12.0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0.0, 40.0, 0.0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
parentNode, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
RGBA(255,255,0,0), _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
RGBA(255,0,0,255))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddParticleSystemToScene</td>
</tr>
<tr>
<td>Syntax<br>
node as irr_particle_system
=IrrAddParticleSystemToScene&nbsp;(&nbsp;add_emitter )<br>
<br>
Description<br>
Adds a particle system to the scene as a node, a particle system is an
object that creates and manages hundreds of small billboard like
objects that are used to represent smoke, rain and other natural
effects. Once created you then need to add emitters and affecters to
create and control the particles.<br>
<br>
Add emitter can be one of the following values: -<br>
IRR_NO_EMITTER<br>
For no default emitter (this is probably the option you will use and
you will then add a specific emitter later)<br>
IRR_DEFAULT_EMITTER<br>
To create a default emitter that ejects a thin vertical stream of
particles.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Smoke =&nbsp;IrrAddParticleSystemToScene(
IRR_NO_EMITTER )</td>
</tr>
</tbody>
</table>
<br>
<span style="font-weight: bold;"></span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddSkyBoxToScene</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrSkyBoxToScene&nbsp;(&nbsp;up_texture as
irr_texture,&nbsp;down_texture as
irr_texture,&nbsp;left_texture as
irr_texture,&nbsp;right_texture as
irr_texture,&nbsp;front_texture as
irr_texture,&nbsp;back_texture as irr_texture )<br>
<br>
Description<br>
Adds a skybox node to the scene this is huge hollow cube that
encapsulates the entire scene and has a different texture applied to
each of its six surfaces to represent a distant sky or matte scene.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>SkyBox = IrrAddSkyBoxToScene( _<br>
&nbsp;&nbsp;&nbsp;
IrrGetTexture("./media/irrlicht2_up.jpg"),_<br>
&nbsp;&nbsp;&nbsp;
IrrGetTexture("./media/irrlicht2_dn.jpg"),_<br>
&nbsp;&nbsp;&nbsp;
IrrGetTexture("./media/irrlicht2_lf.jpg"),_<br>
&nbsp;&nbsp;&nbsp;
IrrGetTexture("./media/irrlicht2_rt.jpg"),_<br>
&nbsp;&nbsp;&nbsp;
IrrGetTexture("./media/irrlicht2_ft.jpg"),_<br>
&nbsp;&nbsp;&nbsp;
IrrGetTexture("./media/irrlicht2_bk.jpg"))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddSkyDomeToScene
(contributed by&nbsp;<span class="name"><b>Eponasoft</b></span>
)</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddSkyDomeToScene&nbsp;(&nbsp;texture as
irr_texture,&nbsp;horizontal_res as uinteger,&nbsp;vertical_res
as
uinteger,&nbsp;texture_percentage as
double,&nbsp;sphere_percentage as
double, sphere_radius as single )<br>
<br>
Description<br>
Adds a skydome node to the scene this is huge hollow sphere (or part of
a sphere) that
encapsulates the entire scene to represent a distant sky or matte
scene. The horizontal and
vertical resolution define the number of segments in the mesh of the
sphere (setting these too
high can quickly produce a very costly mesh). Texture percentage
defines the amount of the
texture that is mapped to the scene, this should be a value between 0
and 1 (0 being non of
the texture and 1 being the whole texture). Finally sphere percentage
defines how much of a
sphere is created and should be a value between 0 and 2 (0 being none
of a sphere, 1 being a
hemi-sphere and 2 being a full sphere).<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>SkyBox = IrrAddSkyDomeToScene(
IrrGetTexture("./media/domesky.jpg"), 8, 8, 1.0, 2.0, 10000.0 ); </td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddEmptySceneNode</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddEmptySceneNode<br>
<br>
Description<br>
Adds an empty node to the scene. This is required if you wish to add
custom OpenGL commands with no Irrlicht Objects.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>EmptyNode = IrrAddEmptySceneNode</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddTestSceneNode</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrAddTestSceneNode<br>
<br>
Description<br>
Adds a simple cube object to the scene. This is particularly useful for
testing and is a quick and easy way of playing objects into the scene
for testing placement.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>TestBox =&nbsp;IrrAddTestSceneNode</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddCubeSceneNode</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrAddCubeSceneNode( size as single )<br>
<br>
Description<br>
Adds a simple cube object to the scene with the specified dimensions.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyCube =&nbsp;IrrAddCubeSceneNode( 10.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddSphereSceneNode</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrAddSphereSceneNode( radius as single, poly_count
as integer )<br>
<br>
Description<br>
Adds a simple sphere object to the scene of the specified radius and
with the specified level of detail. A reasonable value for poly_count
would be 16 setting this value too high could produce a very high
density mesh and affect your frame rate adversely.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MySphere =&nbsp;IrrAddSphereSceneNode( 0.5, 16 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddWaterSurfaceSceneNode
(contributed by&nbsp;<span class="name"><b>Eponasoft</b></span>
)</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddWaterSurfaceSceneNode ( mesh as irr_mesh, waveHeight
as Single = 2.0, waveSpeed as Single = 300.0, waveLength as Single =
10.0, parent as irr_scene_node = 0, id as Integer = -1, positionX as
Single = 0, positionY as Single = 0, positionZ as Single = 0, rotationX
as Single = 0, rotationY as Single = 0, rotationZ as Single = 0, scaleX
as Single = 1.0, scaleY as Single = 1.0, scaleZ as Single = 1.0)<br>
<br>
Description<br>
Adds a mesh with a water animator applied to it, the mesh is animated
automatically to simulate a water effect across its surface. Many
properties are predefined for this node and a convincing water effect
can be created simply by supplying the parameter for the mesh, however
the node can be positioned, rotated and scaled by this call and the
appearance of the waves on its surface can be adjusted.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>WaterNode =&nbsp;IrrAddWaterSurfaceSceneNode(
pond_mesh )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddZoneManager</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddZoneManager ( initialNearDistance as
single,&nbsp;initialFarDistance as single )<br>
<br>
Description<br>
Adds a zone/distance management node to the scene. This simple but very
powerful object has no visible geometry in the scene, it is used by
attaching other nodes to it as children. When the camera is further
away than the far distance and closer than the near distance to the
zone manager all of the zones child objects are made invisible. This
allows you to group objects together and automatically have them hidden
from the scene when they are too far away to see. By using the near
distance you could have two sets of objects in the scene one with high
detail for when you are close and another with low detail for when you
are far away.<br>
<br>
Another way to use the zone manager would be to test when your camera
is inside the zones bounding box and switch its visibility on and off
manually.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>zone = IrrAddZoneManager(100,300)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddClouds
(Node by G Davidson)</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddClouds ( texture as irr_texture, lod as uinteger,
depth as uinteger, density as uinteger )<br>
<br>
Description<br>
Adds a set of clouds to the scene. These clouds are most appropriate to
a cloud effect experienced by a vehicle flying through them and could
be of particular use in masking the transition of a spacecraft from an
orbital vantage point to a flat terrain object. They do make a nice
ordernary cloud effect too but can appear unrealistic when they are
directly over the observer.<br>
<br>
LOD defeines the level of detail in the cloud, more detail is added
into the cloud depending on the distance of the observer from the
object. depth defines the depth of recursion when creating the cloud
and finally density defines the number of clouds in the cloud object. <br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>CloudNode = IrrAddClouds( CloudTexture, 3, 1, 500 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddLensFlare
(Node by Paulo Oliveira with updates from gammaray and torleif)</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddLensFlare ( texture as irr_texture )<br>
<br>
Description<br>
Adds a lens flare patch object to the scene, this object simulates the
effect of bright lights on the optics of a camera., the position of the
lens flare can be set and changed with the IrrSetNodePosition command.
The lens flare obejct uses a bitmap containing a series of 128x128
images representing stages of the the lens flare effect.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>SceneNode = IrrAddLensFlare( LensTexture )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddGrass&nbsp;(Node
by G Davidson)</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddGrass ( terrain as irr_terrain, x as integer, y as
integer, patchSize as integer, fadeDistance as single, crossed as
integer,
grassScale as single, maxDensity as uinteger, dataPositionX as integer,
dataPositionY as integer, heightMap as irr_image, textureMap as
irr_image,
grassMap as irr_image, grassTexture as irr_texture )<br>
<br>
Description<br>
Adds a grass object to the scene. Grass objects are associated with
terrain and tile terrain objects and are used to place small billboard
objects into the scene representing folliage, this implementation of
grass creates a large number of grass objects already positioned across
the terrain and then dynamically shows or hides them depending on where
the camera is within the scene. The grass is also affected with a wind
modifier that gently moves the grass as if it were caught in the wind
(by setting the speed of the wind to zero the grass will become static
and you will see an increase in performance).<br>
<br>
The position and size of the patch of grass can be set with x, y,
patchSize and grassScale.<br>
FadeDistance controls the distance at which the number of displayed
grass
elements in that patch are reduced. If this is set to 1.0 then when the
cameral is inside the patch all of grass will be displayed but once
outside
less and less will be shown. By increasing this to 2.0 then all of the
grass
is shown until the camera is two patches distant. This gives a better
appearence but reduces performance as more grass has to be drawn.<br>
crossed can be set to either IRR_ON or IRR_OFF. When off each piece of
grass
is a separate entity with its own position and rotation. When On grass
is
paired up and placed to form a cross. Crossed grass can have a better
appearance as you rotate around it. However individual grass can give
the
impression that there is more of it and you can therefore reduce the
number
of grass blades and increase performance.<br>
MaxDensity controls the number of individual clumps of folliage that
are created.<br>
Dataposition X and Y can be used with a large bitmap associated with a
tiled terrain and allow the color information to be taken from an
offset position on the bitmap.<br>
Heightmap is an image that contains the height of the terrain onto
which the grass is placed.<br>
TextureMap is the color map used to color the verticies of the grass
and allow you to create areas of dark of light grass, you can use the
terrain color map here.<br>
GrassMap is an image used to adjust the height and density of the
grass. For example you might have a patch where you dont want to see
any grass or a barren patch where you want short stubble.<br>
GrassTexture is the actually texture used for the grass. This RGBA
image is automatically broken up into a number of sections that are
used to texure different clumps of grass.<br>
<br>
Grass usually looks best when it is closely matched to the color of the
terrain and to assist with this a new Material Type has been
added&nbsp;IRR_EMT_TRANSPARENT_ADD_ALPHA_CHANNEL_REF that adds the
color of grass texture to the color of the grass which is automatically
set to the color of the terrain that it lies upon.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>grassNode = IrrAddGrass ( Terrain, x, y, 1024, 1.0,
250, 0, 0, terrainHeight, terrainColor, grassMap, grassTexture )</td>
</tr>
</tbody>
</table>
<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetShadowColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetShadowColor ( Alpha as integer, Red as integer, Green as integer,
Blue as integer )<br>
<br>
Description<br>
Sets the color of shadows cast by objects in the scene. If you are
observing a bright scene you might use a light grey shadow instead of a
heavy black shadow to add to realism.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetShadowColor( 0, 128, 128, 128 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetFog</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrSetFog (&nbsp;Red as integer,&nbsp;Green
as
integer,&nbsp;Blue as integer,&nbsp;fogtype as
integer,&nbsp;fog_start
as single,&nbsp;fog_end as single,&nbsp;density as single )<br>
<br>
Description<br>
Set the properties of fog in the scene.<br>
<br>
Red, Green and Blue define the fog color, you should set this to the
same color as your sky so the scene fogs out nicely into nothing. These
are integer values in the range of 0 to 255<br>
<br>
Fogtype specifies whether you want the fog to increase in a linear
mannar or exponentially - exponential fog usually<br>
&nbsp;looks more atmospheric while linear looks more like a dense
sea fog. This may be specified as either<br>
IRR_LINEAR_FOG<br>
IRR_EXPONENTIAL_FOG<br>
<br>
Fog start and end&nbsp;specify the distance at which the fog starts
and
the distance at which the fog reaches its maximum density. The values
here will depend on the size and scale of the scene.<br>
<br>
Density is only used with exponential fog and determines how quickly
the exponential change takes place, good values &nbsp;for this
range
from 0 to 1<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ThinFog = IrrSetFog ( 240,255,255, IRR_EXPONENTIAL_FOG,
0.0,8000.0, 0.5 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrDraw3DLine</td>
</tr>
<tr>
<td>Syntax<br>
IrrDraw3DLine( x_start as single, y_start as single, z_start as single,
x_end as single, y_end as single, z_end as single, Red as integer,
Green as integer,
Blue as integer )<br>
<br>
Description<br>
Draws a line onto the display using 3D co-ordinates and a specified
color.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrBeginScene( 240, 255, 255 )<br>
IrrDraw3DLine( 0.0, 0.0, 0.0,&nbsp; 0.0, 50.0, 0.0,&nbsp; 0,
255, 0 )<br>
IrrDrawScene</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetSkyDomeColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetSkyDomeColor(&nbsp;dome as irr_node, horizontalRed as
uinteger, horizontalGreen as uinteger, horizontalBlue as uinteger,
zenithRed as uinteger, zenithGreen as uinteger, zenithBlue as uinteger )<br>
<br>
Description<br>
Set the color of the verticies in the skydome. Two colors are defined
one for the horizon and another for the top of the sky dome, this
simulates the type of coloring effects you see in the sky. If you are
using a full spherical skydome the horizontal color will be the color
at the bottom of the skydome.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>' color the skydome so that it is brighter at the
horizon and a darker blue at the top of the sky<br>
IrrSetSkyDomeColor( SkyDome, 128, 128, 255,&nbsp; 64, 64, 255 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetSkyDomeColorBand</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetSkyDomeColorBand(&nbsp;dome as irr_node, horizontalRed as
uinteger,
horizontalGreen as uinteger, horizontalBlue as uinteger,
bandVerticalPosition as integer,&nbsp;bandFade as single, addative
as uinteger )<br>
<br>
Description<br>
Creates a horizontal band of color in the skydome, this is mainly
useful for creating additional bands of color at the horizon, where
your sky is a graduation of blues and then in the morning you have a
brighter golden band as the sun rises. The vertical position in the
vertex at which you wish to create the band, bandFade defines the
amount that the band is faded into the existing skydome color, addative
can be IRR_ON to add the color of the band to the existing color of the
skydome or IRR_OFF to replace it.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>' add a band of golden color at the horizon<br>
IrrSetSkyDomeColorBand ( SkyDome, 240,220,128, 24, 0.25, IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetSkyDomeColorPoint</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetSkyDomeColorPoint(&nbsp;dome as irr_node,&nbsp;Red as
uinteger,&nbsp;Green as uinteger,&nbsp;Blue as uinteger,
pointXPosition as single, pointYPosition as single, pointZPosition as
single, pointRadius as single, pointFade as single, addative as
uinteger )<br>
<br>
<br>
Description<br>
Set the color of the verticies in the skydome radiating out from a
point. This is powerful effect that can be used to color parts of the
skydome and create effects to represent the glows of the rising sun or
the moon in the sky. The radius is used to limit the distance of the
coloring, pointFade defines the
amount that the band is faded into the existing skydome color and
addative
can be IRR_ON to add the color of the band to the existing color of the
skydome or IRR_OFF to replace it.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>' add a bright golden circle of light at the same point
as the rising sun<br>
IrrSetSkyDomeColorPoint ( SkyDome, 255,220,96, 1000.0, -250.0, 0.0,
1500.0, 0.75, IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetZoneManagerProperties</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddZoneManager ( zoneManager as irr_node, newNearDistance
as single, newFarDistance as single, accumulateChildBoxes as uinteger )<br>
<br>
Description<br>
Sets
the draw distances of nodes in the zone/distance management node and
whether or not the zone manager is to accumulate the bounding boxes of
its children as they are added.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetZoneManagerProperties( zone, 0, 600, IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetZoneManagerBoundingBox</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetZoneManagerBoundingBox ( zoneManager as irr_node,&nbsp; x as
single, y as single, z as single,&nbsp;boxWidth as single,
boxHeight as single,&nbsp;boxDepth as single )<br>
<br>
Description<br>
Allows the user to manually set the bounding box of a zone manager node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetZoneManagerBoundingBox( zone, 0, 0, 0,&nbsp;
100, 100, 100 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetZoneManagerAttachTerrain</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetZoneManagerAttachTerrain ( zoneManager as irr_node,&nbsp;
terrain as irr_terrain, structureMapFile as zstring
ptr,&nbsp;colorMapFile as zstring ptr, detailMapFile as zstring
ptr, ImageX as integer,&nbsp;ImageY as integer, sliceSize as
integer )<br>
<br>
Description<br>
A special feature of the zone manager is its ability to manage tiled
terrain nodes, a zone does this by taking position of an attached
terrain object that it shares with other zone objects whenever the
camera starts to come into range. The terrain object is loaded with new
height information, color and detail ready for when it becomes visible
to the camera.<br>
<br>
The structureMapFile is the name of an RGBA bitmap file that is to be
used to set the structure of the terrain. The Alpha channel is used to
set the height and the RGB channels are used to set the color of the
vertex at that position. This can be used to load lighting into the
scene or to load detail map blending into the scene for simple terrain
spattering (discussed in the tile terrain section).<br>
<br>
The optional color and detail maps are loaded to apply new color and
detail maps to the terrain. If either is not used they should be
replaced with IRR_NO_OBJECT.<br>
<br>
The Image X and Y define the X and Y position of this tile on the
structure and color images, so you could load a 1024x1024 structure
image and a 1024x1024 detail image in and have your zones form a grid
across these large bitmaps.<br>
<br>
Finally SilceSize allows you to only process a slice of the terrain on
each frame, as a tile is swapped loading in bitmaps and then adjusting
what could be 65,000 vertices in a single frame will cause a noticable
hiccup in the smooth running of the scene, so by setting the SliceSize
you can define how many rows of the terrain are to be processed on each
frame.for example if your tile is 128x128 you might process 32 rows,
the tile would then be restructured over 4 frames instead of trying to
do it all in one.<br>
<br>
Note: You can load your images manually to save them with IrrGetImage
and IrrGetTexture and let them stay in memory to avoid having to load
images while the scene is running however you should stay aware of how
much memory you are using especially the graphics card memory used by
IrrGetTexture.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetZoneManagerAttachTerrain ( Zone(X + Y*ROW_SIZE),
Terrain(index),&nbsp;"SunnyValley.tga",&nbsp;"SunnyValley.bmp",
IRR_NO_OBJECT, X*112, Y*112, 32 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetGrassDensity</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetGrassDensity ( grass as irr_node,&nbsp; density
as integer, distance as single )<br>
<br>
Description<br>
Set grass density, density being the number of grass nodes visible in
the scene and distance being the distance at which they can be seen.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetGrassDensity ( grassNode, 300, 4000 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetGrassWind</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetGrassWind ( grass as irr_node,&nbsp; strength
as single, resoloution as single )<br>
<br>
Description<br>
Set the grass wind effect, the strength being the strength of the wind,
the resoloution being how often the effect is calculated. By setting
the resoloution to zero the wind effect will be stopped and there will
be a performance increase however the wind effect adds significantly to
the subtle atmosphere of the scene.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetGrassWind ( grassNode, 3.0, 1.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetGrassDrawCount</td>
</tr>
<tr>
<td>Syntax<br>
uinteger = IrrGetGrassDrawCount ( grass as irr_node )<br>
<br>
Description<br>
Get the number of grass objects drawn.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>VisibleGrass = IrrGetGrassDrawCount( Grass )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetFlareScale</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetFlareScale ( flare as irr_node,&nbsp; source
as single, optics as single )<br>
<br>
Description<br>
Sets the scale of optics in the scene. The source is the texture used
to surround the light source while the options are the scale of
textures in the optics of the camera. Sometimes it is effected to make
the scale of the source considerably larger than those of the optics
and to scale the effect in the optics down so that their appearence is
more subtle.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetFlareScale&nbsp;( FlareNode, 2.0, 1.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddLODManager</td>
</tr>
<tr>
<td>Syntax<br>
node = IrrAddLODManager ( fadeScale as uinteger = 4, useAlpha as
uinteger = IRR_ON, callback as any ptr = 0 )<br>
<br>
Description<br>
Adds a level of detail manager to the scene. The
primary use for this node is to add other scene nodes to it as children
and have their level of detail controlled automatically. If those nodes
are made from loaded meshs different meshes containing different
amounts of detail can be displayed at different distances. <br>
<br>
The
other function of the LOD manager is to fade nodes in an out at a
specific distance so they gradually fade rather than disappear
abruptly. This is achieved by applying a distance without supplying a
mesh.<br>
<br>
fadeScale is the number of 1/4 seconds that the node takes to fade out
or in. 4 units equals 1 second.<br>
useAlpha specifies whether or not the Alpha color of the object is
faded too.<br>
the callback function is called whenever a node is made invisible or
visible. this allows you to stop processing hidden nodes.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>LODManager = IrrAddLODManager( 4, IRR_ON,
@NodeChangeCallback )<br>
IrrAddLODMesh( LODManager,&nbsp;&nbsp; 0.0, LOD1Mesh )<br>
IrrAddLODMesh( LODManager, 400.0, IRR_NO_OBJECT )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddLODMesh</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddLODMesh (&nbsp;node as irr_node,&nbsp;distance as
single,&nbsp;mesh as irr_mesh )<br>
<br>
Description<br>
Set the distance at which a particular mesh is to
be applied to child mesh nodes. if no mesh is supplied it specifies the
distance at which the node should be faded in an out.<br>
<br>
node is the LOD manager node<br>
distance is the distance at which this effect will be applied<br>
mesh is the mesh used at this distance and beyond or null to specifiy
the limit of visibility for this node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>LODManager = IrrAddLODMesh( 4, IRR_ON,
@NodeChangeCallback )<br>
IrrAddLODMesh( LODManager,&nbsp;&nbsp; 0.0, LOD1Mesh )<br>
IrrAddLODMesh( LODManager, 400.0, IRR_NO_OBJECT )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetLODMaterialMap&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLODMaterialMap (&nbsp;node as irr_node,&nbsp;source as
IRR_MATERIAL_TYPES,&nbsp;target as IRR_MATERIAL_TYPES )<br>
<br>
Description<br>
Specifies which material is used to apply the fade
effect for another material type. How this is used will depend on the
effect that you want to achieve. By default fading is applied with the
IRR_EMT_TRANSPARENT_VERTEX_ALPHA material.<br>
<br>
node is the LOD manager node<br>
source is the material type your node uses<br>
target is the material type used for the fade effect.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLODMaterialMap( LODManager,
IRR_EMT_TRANSPARENT_ADD_COLOR, IRR_EMT_TRANSPARENT_ADD_COLOR)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddBillBoardGroupToScene&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
node = IrrAddBillBoardGroupToScene&nbsp;(&nbsp;)<br>
<br>
Description<br>
Adds a billboard group to the scene. This is a
special object that can have billboard like objects added and removed
from it and rendered in a very quick an efficient manner. They are all
treated as a single object rather than as many individual nodes. This
is particuallarly useful for custom particle effects.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>BillboardGroup = IrrAddBillBoardGroupToScene</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddBillBoardToGroup&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
BillboardAddress = IrrAddBillBoardToGroup (<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;group as irr_node,
_<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizex
as single,&nbsp;sizey as single, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x
as single = 0,&nbsp;y as single = 0,&nbsp;z as single = 0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll
as single = 0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A
as uinteger = 255,&nbsp;R as uinteger = 255,&nbsp;G as uinteger
=
255,&nbsp;B as uinteger = 255 )<br>
<br>
Description<br>
Adds a billboard to a billboard group. There are a number of properties
that are used to specify the billboard.<br>
<br>
group is the billboard group node<br>
sizex and sizey are the x and y sizes of the billboard<br>
x, y and z define the position of the billboard<br>
roll specifies the number of degrees that the billboard is spun around
its center.<br>
A, R, G and B specify the color used for the&nbsp;billboard<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>BillboardAddress = IrrAddBillBoardToGroup(
BillboardGroup,_<br>
&nbsp; &nbsp; &nbsp; &nbsp; 200.0, 200.0, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; 0.0, 0.0, 0.0, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; 0.0, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; 0, 255, 255, 255 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddBillBoardByAxisToGroup&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
BillboardAddress = IrrAddBillBoardByAxisToGroup (<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;group as irr_node,
_<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizex
as single,&nbsp;sizey as single, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x
as single = 0,&nbsp;y as single = 0,&nbsp;z as single = 0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll
as single = 0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A
as uinteger = 255,&nbsp;R as uinteger = 255,&nbsp;G as uinteger
=
255,&nbsp;B as uinteger = 255, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;axis_x
as single = 0, axis_y as single = 0, axis_z as single = 0 )<br>
<br>
Description<br>
Adds a billboard to a billboard group that is
fixed to a particular axis these billboards are particularly useful for
things like grass..There are a number of properties that are used to
specify the billboard.<br>
<br>
group is the billboard group node<br>
sizex and sizey are the x and y sizes of the billboard<br>
x, y and z define the position of the billboard<br>
roll specifies the number of degrees that the billboard is spun around
its center.<br>
A, R, G and B specify the color used for the&nbsp;billboard<br>
axis_x, axis_y, axis_z a direction around which the billboard is spun
to face the camera<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>BillboardAddress = IrrAddBillBoardByAxisToGroup(
BillboardGroup,_<br>
&nbsp; &nbsp; &nbsp; &nbsp; 200.0, 200.0, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; 0.0, 0.0, 0.0, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; 0.0, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; 0, 255, 255, 255, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; 0.0, 1.0, 0.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrRemoveBillBoardFromGroup
&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveBillBoardFromGroup&nbsp; ( group as irr_node,
billboardAddress as any ptr )<br>
<br>
Description<br>
Removes the specified billboard from the billboard group<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveBillBoardFromGroup ( BillboardGroup,
BillboardAddress )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrBillBoardGroupShadows&nbsp;&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
IrrBillBoardGroupShadows&nbsp; (&nbsp;group as irr_node, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x
as single = 1.0,&nbsp;y as single = 0,&nbsp;z as single = 0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intensity
as single = 1.0,&nbsp;ambient as single = 0.0 )<br>
<br>
Description<br>
Applies
lighting to the billboards in a cluster of billboards. This can be used
for example to shade the particles in a group of billboards
representing a cloud.<br>
<br>
group is the group of billboards to which the lighting is to be applied.<br>
x, y and z is the direction from which the light is arriving<br>
intensity is the strength of the light<br>
ambient is the strength of ambient light in the billboard group<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrBillBoardGroupShadows( BillBoardGroup, 1.0, 0.0,
0.0, &nbsp;1.0, 0.5 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetBillBoardGroupCount&nbsp;&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
uinteger = IrrGetBillBoardGroupCount&nbsp; ( group as irr_node )<br>
<br>
Description<br>
Get the number of billboards in the billboard group.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>count = IrrGetBillBoardGroupCount&nbsp;(
BillboardGroup )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrBillBoardForceUpdate&nbsp;&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
IrrBillBoardForceUpdate&nbsp; ( group as irr_node )<br>
<br>
Description<br>
Unlike
regular billboards the billboard group does not always update the
orientation of the billboards every frame. If you are a long distance
away from the billboard group the camera needs to travel a significant
distance before the angle has changed enough to warrent an update of
all of the billboards verticies to make them point to the camera once
more. You may want to force a refresh at some point with this call.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrBillBoardForceUpdate&nbsp;( BillboardGroup )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddBoltSceneNode&nbsp;
(Scene Node created by Sudi with extensions by 
						<div class="channel-title outer-box-color" style="display: none;" id="channel_title"></div>
						Trivtn)</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddBoltSceneNode (&nbsp; )<br>
<br>
Description<br>
The
bolt is a special scene node that can be used to replicate electrical
effects. This command simply adds the bolt you should then make a call
to set the bolts properties. This node can be used to simulate
lightning and other electrical effects.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ElectricNode = IrrAddBoltSceneNode(&nbsp;)<br>
IrrSetBoltProperties ( SceneNode, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0,90,0,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the start point for the bolt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0,0,0,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the end point for the bolt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
50,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the bolt updates every 50 miliseconds<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
10,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the bolt is 10 units wide<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the bolt is 5 units thick<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
10,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' there are 10 sub parts in each bolt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
4,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' there are 4 individual bolts<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
IRR_ON,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the end is not connected to an exact point<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
RGBA( 255, 255, 255, 0 )) ' Lighting color<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetBoltProperties
&nbsp;&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetBoltProperties ( <br>
&nbsp; &nbsp; &nbsp; &nbsp; bolt as irr_node, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startX
as single, startY as single, startZ as single, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endX
as single, endY as single, endZ as single, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateTime
as uinteger = 50, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
radius as uinteger = 10, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thickness
as single = 5.0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts
as uinteger = 10, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bolts
as uinteger = 6, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steadyend
as uinteger = IRR_OFF, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boltColor
as uinteger = RGBA(0,0,255,255))<br>
<br>
Description<br>
This
sets the properties of a bolt node that simulates an electrical effect.
There are a number of properties that control many aspects of the bolt
to produce a wide range of appearences..<br>
<br>
Start X, Y and Z define the point that the bolt origionates from.<br>
<br>
End X,Y and Z| define the terminating point for the bolt.<br>
<br>
Update time specifies the number of miliseconds between updates to the
appearence of the bolt.<br>
<br>
Radius is the radius of the entire bolt effect.<br>
<br>
Thickness is the thickness of a single electrical element in the bolt.<br>
<br>
Parts defines the number of segments the bolt is divided into.<br>
<br>
Bolts represents the number of individual electrical arcs that are
rendered.<br>
<br>
SteadyEnd when set to IRR_ON ends in a tight point, when set to IRR_OFF
it ends with the same width as the rest of the bolt.<br>
<br>
Color specifies the diffuse color that is applied to the bolt.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ElectricNode = IrrAddBoltSceneNode(&nbsp;)<br>
IrrSetBoltProperties ( SceneNode, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0,90,0,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the start point for the bolt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0,0,0,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the end point for the bolt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
50,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the bolt updates every 50 miliseconds<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
10,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the bolt is 10 units wide<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the bolt is 5 units thick<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
10,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' there are 10 sub parts in each bolt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
4,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' there are 4 individual bolts<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
IRR_ON,
_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
' the end is not connected to an exact point<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
RGBA( 255, 255, 255, 0 )) ' Lighting color</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddBeamSceneNode&nbsp; (Scene Node by Gaz Davidson (Blindside))</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrAddBeamSceneNode&nbsp; (&nbsp; )<br>
<br>
Description<br>
The beam is a special scene node that can be used to replicate
beam effects like lasers and tracer gun fire. This command simply adds
the beam you should then
make calls to set the beams properties.<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>BeamNode = IrrAddBeamSceneNode&nbsp;(&nbsp; )<br>
IrrSetBeamSize&nbsp;( BeamNode, 5.0 )<br>
IrrSetBeamPosition&nbsp;( BeamNode, X,Y,Z, &nbsp;X+100,Y,Z )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetBeamSize&nbsp;&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetBeamSize&nbsp; ( beam as irr_node, size as single )<br>
<br>
Description<br>
This call sets the width of a beam node<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetBeamSize&nbsp;( BeamNode, 5.0 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetBeamPosition&nbsp;&nbsp;</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetBeamPosition&nbsp; ( beam as irr_node, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startX
as single, startY as single, startZ as single, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endX
as single, endY as single, endZ as single&nbsp; )<br>
<br>
Description<br>
This call sets the start and end positions of a beam node. The beam
will stretch between the two nodes.<br>
<br>
Start X, Y and Z define the point that the bolt origionates from.<br>
<br>
End X,Y and Z| define the terminating point for the bolt.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetBeamPosition&nbsp;( BeamNode, X,Y,Z,
&nbsp;X+100,Y,Z )<br>
</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Scene_Nodes"></a>Scene Nodes</h2>
Calls for manipulating, texturing and getting information from nodes
in the scene.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeName
</td>
</tr>
<tr>
<td>Syntax<br>
const zstring ptr =&nbsp;IrrGetNodeName (&nbsp;node as irr_node
)<br>
<br>
Description<br>
Get the name of the node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>NodeName =&nbsp;IrrGetNodeName( StatueNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeName
</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeName (&nbsp;node as irr_node, name as zstring ptr )<br>
<br>
Description<br>
Set the name of a node<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeName( StatueNode, "HeroStatue" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeMesh
</td>
</tr>
<tr>
<td>Syntax<br>
irr_mesh = IrrGetNodeMesh (&nbsp;node as irr_node )<br>
<br>
Description<br>
Get the mesh that is associated with a node<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>myMesh = IrrGetNodeMesh( StatueNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetMaterialCount
</td>
</tr>
<tr>
<td>Syntax<br>
integer = IrrGetMaterialCount (&nbsp;node as irr_node )<br>
<br>
Description<br>
Get the number of materials associated with a node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>nummaterials = IrrGetMaterialCount( StatueNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetMaterial</td>
</tr>
<tr>
<td>Syntax<br>
irr_material = IrrGetMaterial(&nbsp;node as
irr_node,&nbsp;material_index as integer )<br>
<br>
Description<br>
Get the material associated with the node at the particular index<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>current_material = IrrGetMaterial( StatueNode, index )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeMaterialTexture</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeMaterialTexture(&nbsp;node as irr_node,&nbsp;texture
as irr_texture,&nbsp;material_index as integer )<br>
<br>
Description<br>
Applys a texture to a node in the scene, how the texture is applied
across the surface of the node will depend on the texturing
co-ordinates in each of the vectors of the mesh and how they are
plotted across the surface of the texture.<br>
Some nodes can have several textures applied to them to create special
material effects.<br>
<br>
Node refers to a node you have added to the scene.<br>
<br>
Texture refers to a texture you have loaded from an image file.<br>
<br>
Material is the index number of the material layer, this will usually
be 0 or 1.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeMaterialTexture( DolphinNode, DolphinTexture,
0)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeMaterialFlag</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeMaterialFlag(&nbsp;node as
irr_node,&nbsp;flag as IRR_MATERIAL_TYPES,&nbsp;value as
uinteger )<br>
<br>
Description<br>
Sets material properies of a node that will effect its appearance on
the screen, each of these properties can be either switched on or off.<br>
<br>
Node refers to&nbsp;a node that has been added to the scene.<br>
<br>
Flag is one of the following properties: -<br>
<br>
IRR_EMF_WIREFRAME<br>
Render as wireframe outline<br>
IRR_EMF_GOURAUD_SHADING<br>
Render smoothly across polygons<br>
IRR_EMF_LIGHTING<br>
Material is effected by lighting<br>
IRR_EMF_ZBUFFER<br>
Enable z buffer<br>
IRR_EMF_ZWRITE_ENABLE<br>
Can write as well as read z buffer<br>
IRR_EMF_BACK_FACE_CULLING<br>
Cull polygons facing away<br>
IRR_EMF_BILINEAR_FILTER<br>
Enable bilinear filtering<br>
IRR_EMF_TRILINEAR_FILTER<br>
Enable trilinear filtering<br>
IRR_EMF_ANISOTROPIC_FILTER<br>
Reduce blur in distant textures<br>
IRR_EMF_FOG_ENABLE<br>
Enable fogging in the distance<br>
IRR_EMF_NORMALIZE_NORMALS<br>
Use when scaling dynamically lighted models<br>
<br>
The value should be one of the following to switch the property on or
off: -<br>
IRR_ON<br>
IRR_OFF<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeMaterialFlag(
CharacterNode,&nbsp;IRR_EMF_GOURAUD_SHADING, IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeMaterialType</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeMaterialType(&nbsp;node as irr_node,&nbsp;mat_type as
IRR_MATERIAL_FLAGS )<br>
<br>
Description<br>
Set the way that materials are applied to the node.<br>
<br>
Node refers to&nbsp;a node that has been added to the scene.<br>
<br>
Mat_type is one of the following properties that is applied to the
node: -<br>
<br>
IRR_EMT_SOLID<br>
Standard solid rendering uses one texture<br>
<br>
IRR_EMT_SOLID_2_LAYER<br>
2 blended textures using vertex alpha value<br>
<br>
IRR_EMT_LIGHTMAP<br>
2 textures: 0=color 1=lighting level and ignores vertex lighting<br>
<br>
IRR_EMT_LIGHTMAP_ADD<br>
... as above but adds levels instead of modulating between them<br>
<br>
IRR_EMT_LIGHTMAP_M2<br>
... as above but color levels are multiplied by 2 for brightening<br>
<br>
IRR_EMT_LIGHTMAP_M4<br>
... as above but color leels are multiplied by 4 for brightening<br>
<br>
IRR_EMT_LIGHTMAP_LIGHTING<br>
2 textures: 0=color 1=lighting level but supports dynamic lighting<br>
<br>
IRR_EMT_LIGHTMAP_LIGHTING_M2<br>
... as above but color levels are multiplied by 2 for brightening<br>
<br>
IRR_EMT_LIGHTMAP_LIGHTING_M4 <br>
... as above but color levels are multiplied by 4 for brightening<br>
<br>
IRR_EMT_DETAIL_MAP<br>
2 blended textures: the first is a color map the second at a different
scale adds and subtracts from the color to add detail<br>
<br>
IRR_EMT_SPHERE_MAP<br>
makes the material appear reflective<br>
<br>
IRR_EMT_REFLECTION_2_LAYER<br>
a reflective material blended with a color texture<br>
<br>
IRR_EMT_TRANSPARENT_ADD_COLOR<br>
a transparency effect that simply adds a color texture to the
background. the darker the color the more transparent it is.<br>
<br>
IRR_EMT_TRANSPARENT_ALPHA_CHANNEL<br>
a transparency effect that uses the color textures alpha as a
transparency level<br>
<br>
IRR_EMT_TRANSPARENT_ALPHA_CHANNEL_REF<br>
a transparency effect that uses the color textures alpha, the pixel is
only drawn if the alpha is &gt; 127. this is a fast effect that
does not blur edges and is ideal for leaves &amp; grass etc.<br>
<br>
IRR_EMT_TRANSPARENT_VERTEX_ALPHA<br>
a transparency effect that uses the vertex alpha value<br>
<br>
IRR_EMT_TRANSPARENT_REFLECTION_2_LAYER<br>
a transparent &amp; reflecting effect. the first texture is a
reflection map, the second a color map. transparency is from vertex
alpha<br>
<br>
IRR_EMT_NORMAL_MAP_SOLID<br>
A solid normal map renderer. First texture is color, second is normal
map. Only use nodes added with IrrAddStaticMeshForNormalMappingToScene.
Only supports nearest two lights. Requires vertex and pixel shaders 1.1<br>
<br>
IRR_EMT_NORMAL_MAP_TRANSPARENT_ADD_COLOR<br>
&nbsp;... as above only with a transparency effect that simply adds
the color to the background. the darker the color the more transparent
it is.<br>
<br>
IRR_EMT_NORMAL_MAP_TRANSPARENT_VERTEX_ALPHA<br>
... as above only with a transparency effect that uses the vertex alpha
value<br>
<br>
IRR_EMT_PARALLAX_MAP_SOLID<br>
similar to the solid normal map but more realistic providing virtual
displacement of the surface. Uses the alpha channel of the normal map
for height field displacement. Requires vertex shader 1.1 and pixel
shader 1.4.<br>
<br>
IRR_EMT_PARALLAX_MAP_TRANSPARENT_ADD_COLOR<br>
... as above only with a transparency effect that simply adds the color
to the background. the darker the color the more transparent it is.<br>
<br>
IRR_EMT_PARALLAX_MAP_TRANSPARENT_VERTEX_ALPHA<br>
... as above only wiht a transparency effect that uses the vertex alpha
value<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeMaterialType(
WaterNode,&nbsp;IRR_EMT_LIGHTMAP )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodePosition</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodePosition(&nbsp;node as irr_node,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as single )<br>
<br>
Description<br>
Moves the&nbsp;node to the new position.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodePosition( CharacterNode, 500.0, 100.7, -192.6)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeRotation</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeRotation(&nbsp;node as irr_node,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as single )<br>
<br>
Description<br>
Rotate a node to the specified orientaion through its X, Y and Z axis<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeRotation( CharacterNode, 34.5 0.76, -67.3 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeScale</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeScale(&nbsp;node as irr_node,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as single )<br>
<br>
Description<br>
Change the scale of a node in the scene making it bigger or smaller in
the X, Y and Z axis<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeScale( CharacterNode, 1.2,1.5,1.2 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeRotationPositionChange</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeRotationPositionChange(&nbsp;node as irr_node, roll as
single, pitch as single, yaw as single, drive as
single, strafe as
single, elevate as
single, forwardVector as IRR_VECTOR ptr, upVector as IRR_VECTOR ptr,
offsetVectorCount as integer, offsetVectors as IRR_VECTOR ptr )<br>
<br>
Description<br>
Apply a change in rotation and a directional
force. we can also optionally&nbsp;recover pointers to a series of
vectors. The first is a pointer to a vector pointing forwards the
second is a pointer a vector pointing upwards following this are any
number of points that will also be rotated (the effect on these points
is NOT accumulative so the points should be initialised with their
origonal values each time this is called)<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeRotationPositionChange(
SceneNode,&nbsp;roll,
pitch,&nbsp;yaw, drive, strafe, elevate, @forwardVector, @upVector,
2,
@cameraVector(0))</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrDebugDataVisible</td>
</tr>
<tr>
<td>Syntax<br>
IrrDebugDataVisible (&nbsp;node as irr_node,&nbsp;visible
as&nbsp;integer )<br>
<br>
Description<br>
Displays debugging data around a node, this typically means drawing the
bounding box around the edges of the node.<br>
<br>
There are a series of values for displaying different types of
debugging information and not all of them are supported on all node
types<br>
<br>
0 No Debugging <br>
1 Bounding Box<br>
2 Normals<br>
4 Skeleton<br>
8 Wireframe<br>
16 Transparency<br>
32 Bounding Box Buffers<br>
&amp;hffffffff Everything<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrDebugDataVisible ( PyramidNode, 1 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodePosition</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetNodePosition(&nbsp;node as irr_node,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as single )<br>
<br>
Description<br>
Gets the position of a node in the scene and stores its X, Y and Z
co-ordinates into the supplied variables.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetNodePosition( CharacterNode, XPosition,
YPosition, ZPosition )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeAbsolutePosition</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetNodeAbsolutePosition(&nbsp;node as irr_node,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as single )<br>
<br>
Description<br>
Get the absoloute position of the node in the scene this position
includes the position changes of all of the nodes parents too.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetNodeAbsolutePosition( CharacterNode, XPosition,
YPosition, ZPosition )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeRotation</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetNodeRotation(&nbsp;node as irr_node,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as single )<br>
<br>
Description<br>
Get the rotation of a node in the scene and stores the X, Y and Z
rotation values in the supplied variables..<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetNodeRotation( CharacterNode, XRotation,
YRotation, ZRotation )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeScale</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetNodeScale(&nbsp;node as irr_node,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as single )<br>
<br>
Description<br>
Get the scale of a node in the scene and stores the X, Y and Z scale
values in the supplied variables..<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetNodeScale( CharacterNode, XScale,
YScale, ZScale )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetJointNode</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrGetJointNode (&nbsp;node as
irr_node,&nbsp;joint_name as zstring ptr )<br>
<br>
Description<br>
This supplies you with an invisible node that follows the motion of a
particular joint in an animated models skeleton. You can use this to
attach
child nodes that represent objects a person is carrying for example.
(This call now replaces IrrGetMS3DJointNode and IrrGetDirectXJointNode
which are only supplied for
backwards compatibility). It can now also be used to manually move the
joint.<br>
<br>
The name should refer to the name of a joint in the model.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>HandNode =&nbsp;IrrGetJointNode( CharacterNode,
"LeftHand" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrAddChildToParent</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddChildToParent (&nbsp;child as irr_node,&nbsp;parent as
irr_node )<br>
<br>
Description<br>
Attaches the child node to the parent node, whenever you change the
parent node the child node changes too. This is useful for putting a
cup in a characters hand for example. You can move and rotate the child
node to move the object into position against its parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrAddChildToParent( CupNode, CharacterNode)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeFirstChild</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrGetNodeFirstChild ( node as irr_node, searchPosition as
any ptr )<br>
<br>
Description<br>
Get the first child node of this node, returns 0 if there is no child.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ChildNode = IrrGetNodeFirstChild ( SectorNode, position
)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeNextChild</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrGetNodeNextChild&nbsp;( node as
irr_node,&nbsp;searchPosition as any ptr )<br>
<br>
Description<br>
Get the next child node of this node, returns 0 if there is no child.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ChildNode = IrrGetNodeNextChild( SectorNode, position )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrIsNodeLastChild</td>
</tr>
<tr>
<td>Syntax<br>
integer = IrrIsNodeLastChild (&nbsp;child as
irr_node,&nbsp;parent as
irr_node )<br>
<br>
Description<br>
Attaches the child node to the parent node, whenever you change the
parent node the child node changes too. This is useful for putting a
cup in a characters hand for example. You can move and rotate the child
node to move the object into position against its parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>if&nbsp;IrrIsNodeLastChild( SectorNode, position )
= 0 then<br>
&nbsp; &nbsp; LastNode = IRR_YES<br>
end if</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrAddNodeShadow</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrAddNodeShadow (&nbsp;node as irr_node, mesh
as irr_mesh = 0 )<br>
<br>
Description<br>
Adds shadows to a node that are cast across other nodes in the scene,
shadowing need to be turned on when you call IrrStart. You should
analyse the performance of your scene carefully when using this
function as it can have a significant effect on your frame rate. You
can supply a different mesh to the one used to display the node, this
shadow mesh could be a much lower resoloution than that used for your
model thereby improving performance.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrAddNodeShadow ( CharacterNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeVisibility</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeVisibility (&nbsp;node as irr_node,&nbsp;visible as
integer )<br>
<br>
Description<br>
This allows you to hide nodes from the display so you can quickly and
easily switch objects out to improve performance or create effects liek
one node transforming into another node (perhaps in a puff of particle
smoke).<br>
<br>
Visible can be one of the following values: -<br>
IRR_INVISIBLE<br>
IRR_VISIBLE<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeVisibility( CharacterNode, IRR_VISIBLE )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrRemoveNode</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveNode( node as irr_node )<br>
<br>
Description<br>
Removes a node from the scene deleting it.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveNode( CharacterNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrRemoveAllNodes</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveAllNodes()<br>
<br>
Description<br>
Clears the entire scene, any references to nodes in the scene will
become invalid.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveAllNodes()</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeParent</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeParent ( node as irr_node, parent as irr_node )<br>
<br>
Description<br>
Sets the parent of the specified node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ParentNode =&nbsp;IrrSetNodeParent( ChildNode,
ParentNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeParent</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrGetNodeParent ( node as irr_node )<br>
<br>
Description<br>
Gets the parent of the specified node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ParentNode =&nbsp;IrrGetNodeParent( ChildNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeID</td>
</tr>
<tr>
<td>Syntax<br>
integer =&nbsp;IrrGetNodeID ( node as irr_node )<br>
<br>
Description<br>
Each node can have a 32 bit signed identification number assigned to
them this can be used in collision operations to filter out particular
classes of object.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>NodeID =&nbsp;IrrGetNodeID( TreeNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrSetNodeID</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeID (&nbsp;node as irr_node,&nbsp;id as integer )<br>
<br>
Description<br>
Adds a simple cube object to the scene. This is
particularly useful for testing and is a quick and easy way of playing
objects into the scene for testing placement.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeID ( TreeNode, 8 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeBoundingBox</td>
</tr>
<tr>
<td>Syntax<br>
integer = IrrGetNodeBoundingBox ( node as irr_node, x1 as
single,&nbsp;
y1 as single,&nbsp; z1 as single,&nbsp;x2 as single,&nbsp;
y2 as
single,&nbsp; z2 as single,&nbsp; )<br>
<br>
Description<br>
Gets the coordiantes describing the bounding box of the node into the
six supplied variables.<br>
<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>NodeID = IrrGetNodeBoundingBox( BuildingNode, Xa, Ya,
Za, Xb, Yb, Zb )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 102);">IrrGetNodeTransformedBoundingBox</td>
</tr>
<tr>
<td>Syntax<br>
integer = IrrGetNodeTransformedBoundingBox ( node as irr_node, x1 as
single,&nbsp;
y1 as single,&nbsp; z1 as single,&nbsp;x2 as single,&nbsp;
y2 as
single,&nbsp; z2 as single,&nbsp; )<br>
<br>
Description<br>
Gets the transformed (absolute value) bounding box
of a node into the six supplied variables. So if your node has been
moved hundreds of units away from the origion the co-ordinates of its
bounding box will also be hundreds of units away corisponding to its
real location in the scene.<br>
<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>NodeID = IrrGetNodeTransformedBoundingBox(
BuildingNode, Xa, Ya, Za, Xb, Yb, Zb )</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Animation"></a>Animation</h2>
Calls that control the animation of nodes in the scene either by
playing animation that is embedded in the mesh or applying animator
controls to automatically effect the nodes.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrSetNodeAnimationRange</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeAnimationRange(&nbsp;node as irr_node, Start Frame as
integer,&nbsp;End Frame as integer )<br>
<br>
Description<br>
Sets the range of animation that is to be played in the node. An
anaimation sequences might run from 0 to 200 frames and a sequence
where your character is running might only occupy a portion of this.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeAnimationRange( CharacterNode, 50, 75 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrPlayNodeMD2Animation</td>
</tr>
<tr>
<td>Syntax<br>
IrrPlayNodeMD2Animation (&nbsp;node as irr_node,&nbsp;sequence
as uinteger )<br>
<br>
Description<br>
MD2 format models have specific animation sequences contained within
them that can be played back with a simple call.<br>
<br>
sequence should be one of the following values: -<br>
IRR_EMAT_STAND<br>
IRR_EMAT_RUN<br>
IRR_EMAT_ATTACK<br>
IRR_EMAT_PAIN_A<br>
IRR_EMAT_PAIN_B<br>
IRR_EMAT_PAIN_C<br>
IRR_EMAT_JUMP<br>
IRR_EMAT_FLIP<br>
IRR_EMAT_SALUTE<br>
IRR_EMAT_FALLBACK<br>
IRR_EMAT_WAVE<br>
IRR_EMAT_POINT<br>
IRR_EMAT_CROUCH_STAND<br>
IRR_EMAT_CROUCH_WALK<br>
IRR_EMAT_CROUCH_ATTACK<br>
IRR_EMAT_CROUCH_PAIN<br>
IRR_EMAT_CROUCH_DEATH<br>
IRR_EMAT_DEATH_FALLBACK<br>
IRR_EMAT_DEATH_FALLFORWARD<br>
IRR_EMAT_DEATH_FALLBACKSLOW<br>
IRR_EMAT_BOOM<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrPlayNodeMD2Animation(
CharacterNode,&nbsp;IRR_EMAT_STAND )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrSetNodeAnimationSpeed</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeAnimationSpeed (&nbsp;node as irr_node,&nbsp;speed as
integer )<br>
<br>
Description<br>
Change the speed at which an animation is played for a node. You could
use this to make a character run slowly or quickly and still keep its
feet on the ground.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeAnimationSpeed( CharacterNode, 25 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrGetNodeAnimationFrame</td>
</tr>
<tr>
<td>Syntax<br>
uinteger =&nbsp;IrrGetNodeAnimationFrame( node as irr_node )<br>
<br>
Description<br>
Get the frame number that is currently being played by the node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>CurrentFrame =&nbsp;IrrGetNodeAnimationFrame(
AnimNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrSetNodeAnimationFrame</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeAnimationFrame( node as irr_node, frame as integer )<br>
<br>
Description<br>
Set the current frame number being played in the animation<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeAnimationFrame( CharacterNode, 75 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrSetTransitionTime</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetTransitionTime ( node as irr_node, speed as single )<br>
<br>
Description<br>
Sets the transition time across which two poses of an animated mesh are
blended. For example a character in a sitting pose can be switched into
a lying down pose by blending the two frames, this will provide a more
convincing smooth transition instead of a snap change in
position.&nbsp;IrrAnimateJoints must be called before IrrDrawScene
if
blending is used.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetTransitionTime( CharacterNode, 0.75 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrAnimateJoints</td>
</tr>
<tr>
<td>Syntax<br>
IrrAnimateJoints( node as irr_node )<br>
<br>
Description<br>
Animates the mesh based on the position of the joints, this should be
used at the end of any manual joint operations including blending and
joints animated using IRR_JOINT_MODE_CONTROL and IrrSetNodeRotation on
a bone node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrAnimateJoints( CharacterNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrSetJointMode</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetJointMode ( node as irr_node, mode as uinteger )<br>
<br>
Description<br>
Sets the animation mode of joints in a node. When using the control
mode IrrAnimateJoints must be called before IrrDrawScene.<br>
<br>
IRR_JOINT_MODE_NONE will result in no animation of the model based on
bones<br>
IRR_JOINT_MODE_READ will result in automatic animation based upon the
animation defined with calls like IrrSetNodeAnimationRange<br>
IRR_JOINT_MODE_CONTROL will allow the position of the bones to be set
through code<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetJointMode( CharacterNode, IRR_JOINT_MODE_CONTROL )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrAddCollisionAnimator</td>
</tr>
<tr>
<td>Syntax<br>
irr_animator =&nbsp;IrrAddCollisionAnimator (&nbsp;selector as
irr_selector,&nbsp;node
as irr_node,&nbsp;radius x as single,&nbsp;radius y as
single,&nbsp;radius z as single,&nbsp;gravity x as
single,&nbsp;gravity
y as single,&nbsp;gravity z as single,&nbsp;offset x as
single,&nbsp;offset y as
single,&nbsp;offset z as single )<br>
<br>
Description<br>
This adds a collision animator to a node that applies collision
detection and gravity to the object. The collision detection will stop
the object penetrating through a surface in the objects it is colliding
against and will also press it against the surface using gravity.<br>
<br>
Selector represents a selection of triangles in the scene, this is
usually all of the triangles in a map for instance. Please refer to the
section on collision for further details of how to obtain this object.<br>
<br>
Radius X, Radius Y and Radius Z define an ellipsoid that defines the
area of collision this eliptical shape allows the collision detection
to slide the object up steps and even ladders. If you make it too big
you might be too large to get through a doorway but if you make it too
small you may not be able to climb steps. You should play with these
values and find the best ones for your scene.<br>
<br>
Gravity X, Gravity Y and Gravity Z work together to specify the force
that is applied to the node to make it drop to the ground. Other values
could be used to simulate wind effects.<br>
<br>
Offset X, Offset Y and Offset Z are used to offset the node by a
specific distance from the center of the collision, as the center of
the object and the size of your collision ellipsoid vary you can use
this to adjust the position of the node and to bring it into contact
with the ground. <br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>CollisionAnimator = IrrAddCollisionAnimator(
MapCollision,
CameraNode,&nbsp;30.0,30.0,30.0,&nbsp;0.0,-3.0,0.0,&nbsp;
0.0,50.0,0.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrAddDeleteAnimator</td>
</tr>
<tr>
<td>Syntax<br>
irr_animator =&nbsp;IrrAddDeleteAnimator (&nbsp;node as
irr_node, milliseconds to deletion as integer )<br>
<br>
Description<br>
This animator deletes the node it is attached to after the specified
number of milliseconds (1/1000ths of a second). You could use this
animator to delete a falling rock for example, all you would need to do
is attach the delete animator, a movement animator and then forget
about it.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DeleteAnimator =&nbsp;IrrAddDeleteAnimator(
RockNode, 3000 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrAddFadeAnimator</td>
</tr>
<tr>
<td>Syntax<br>
irr_animator =&nbsp;IrrAddFadeAnimator (&nbsp;node as
irr_node, milliseconds to deletion as integer, scale as single )<br>
<br>
Description<br>
This animator deletes the node it is attached to after the specified
number of milliseconds (1/1000ths of a second). During the time while
it is waiting to delete it the node is slowly faded to invisibility and
is also scaled by the specified amount. You could use this
animator to fade and delete an object from a scene that was no longer
required like a used medical pack, all you would need to do
is attach the fade animator and&nbsp;forget
about it.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>FadeAnimator =&nbsp;IrrAddFadeAnimator(
MedicalNode, 3000, 0.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrAddFlyCircleAnimator</td>
</tr>
<tr>
<td>Syntax<br>
irr_animator =&nbsp;IrrAddFlyCircleAnimator (&nbsp;node as
irr_node, center x as
single, center y as single, center z as single,&nbsp;radius as
single,&nbsp;speed as single )<br>
<br>
Description<br>
This animator moves the node it is attached to in a circular path. <br>
<br>
Center X, Center Y and Center Z define the center of the circular path.<br>
<br>
Radius defines the radius of the path<br>
<br>
Speed defines the rate the node moves around the circular path<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>CircleAnimator =&nbsp;IrrAddFlyCircleAnimator(
PowerNode, 0,0,0 50, 20 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrAddFlyStraightAnimator</td>
</tr>
<tr>
<td>Syntax<br>
irr_animator =&nbsp;IrrAddFlyStraightAnimator (&nbsp;node as
irr_node,&nbsp;start x as
single,&nbsp;start y as single,&nbsp;start z as
single,&nbsp;end x
as single,&nbsp;end y as single,&nbsp;end z as
single,&nbsp;time to complete as uinteger,&nbsp;loop path as
integer )<br>
<br>
Description<br>
This animator makes the node it is attached to move in a straight line
from the start to the end end point. It would be useful for objects
moving on a conveyor belt for example<br>
<br>
Start X, Start Y and Start Z specify the start point of the path.<br>
<br>
End X, End Y and End Z specify the end point of the path.<br>
<br>
Time to complete specifies the number of milliseconds the animator will
take to move the node from the start to the end point<br>
<br>
Loop path determines if the node will be moved from the start to the
end and then stopped or whether the animation will be looped this
parameter should be either: -<br>
IRR_ONE_SHOT<br>
For a single animation and then stop<br>
IRR_LOOP<br>
To continuously repeat the animation<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>FlyAnimator&nbsp;= IrrAddFlyStraightAnimator(
AnimatedBox, 0,50,-300, 0,50,300, 3000, IRR_LOOP )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrAddRotationAnimator</td>
</tr>
<tr>
<td>Syntax<br>
irr_animator =&nbsp;IrrAddRotationAnimator (&nbsp;node as
irr_node,&nbsp;x as single,&nbsp;y as single,&nbsp;z as
single )<br>
<br>
Description<br>
This animator makes the node it is attached to spin around.<br>
<br>
X, Y and Z specify the number of radians the object is spun around each
axis<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>RotationAnimator = IrrAddRotationAnimator(
DisplayCaseNode, 0, 0.1, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrAddSplineAnimator</td>
</tr>
<tr>
<td>Syntax<br>
irr_animator =&nbsp;IrrAddSplineAnimator (&nbsp;node as
irr_node,&nbsp;array size as
integer,&nbsp;x as single,&nbsp;y as single,&nbsp;z as
single,&nbsp;time to start as integer,&nbsp;speed as
single,&nbsp;tightness as
single )<br>
<br>
Description<br>
This is one of the more difficult to set up of the
animators&nbsp;but
is&nbsp;very natural looking and powerful. A spline is a curved
line
that passes through or close to a list of co-ordinates, creating a
smooth flight. This animator needs a list of coordinates stored in
three arrays, one array each for the X, Y and Z locations of all the
points. A good way to get co-ordinates for these arrays is to load in
the camera position example program and move your camera to a point and
write down its co-ordinates.<br>
<br>
Array size specifies how many points there are in your spline motion.<br>
<br>
The three arrays X, Y and Z containing co-ordinates are passed by
reference as a pointer therefore you should ensure that the array is
the correct size otherwise unpredictable results will be obtained.<br>
<br>
Time to start specifies the number of milliseconds that must pass
before the animation starts.<br>
<br>
Speed defines the rate the node moves along the spline curve.<br>
<br>
Tightness specifies how tightly the curve is tied to the points (0 is
angular and 1 is very loose)<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>SplineX(0) = -100 :&nbsp;SplineY((0) = &nbsp;
50 :&nbsp;SplineZ((0) = &nbsp; &nbsp;0<br>
SplineX(1) = &nbsp; &nbsp;0 :&nbsp;SplineY((1) =
&nbsp;100 :&nbsp;SplineZ((1) = -100<br>
SplineX(2) = &nbsp;100 :&nbsp;SplineY((2) = &nbsp; 50
:&nbsp;SplineZ((2) = &nbsp; &nbsp;0<br>
SplineX(3) = &nbsp; &nbsp;0 :&nbsp;SplineY((3) =
&nbsp;100 :&nbsp;SplineZ((3) = &nbsp;100<br>
SplineAnimator = IrrAddSplineAnimator( CameraNode, 4,
SplineX(0),&nbsp;SplineY(0),&nbsp;SplineZ(0), 0, 0.5, 1)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 255);">IrrRemoveAnimator</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveAnimator (&nbsp;node as irr_node,&nbsp;node as
irr_animator )<br>
<br>
Description<br>
This removes an animator from a node. Stopping the animation or
cleaning an animator up so you can apply a new one.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveAnimator( DoorNode, FlyAnimator )</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Collision"></a>Collision</h2>
Calls for creating collision groups and for calculating collisions in
the scene.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionGroupFromMesh</td>
</tr>
<tr>
<td>Syntax<br>
irr_selector = IrrGetCollisionGroupFromMesh (&nbsp;mesh as
irr_mesh,&nbsp;node as
irr_node )<br>
<br>
Description<br>
Creates a collision object from the triangles contained within the
specified mesh as applied to the position, rotation and scale of the
supplied node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ObjectSelector = IrrGetCollisionGroupFromMesh(
SimpleBuildingMesh, MyBuilding )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionGroupFromComplexMesh</td>
</tr>
<tr>
<td>Syntax<br>
irr_selector =&nbsp;IrrGetCollisionGroupFromComplexMesh ( mesh as
irr_mesh,&nbsp;node as irr_node)<br>
<br>
Description<br>
Creates an optimized triangle selection group from a large complex mesh
like a map. This group can then be used in collision functions to
collide objects against this node. You need to supply both the mesh the
node was created from and the node itself.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MapSelector
=&nbsp;IrrGetCollisionGroupFromComplexMesh( MapMesh, MapNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionGroupFromBox</td>
</tr>
<tr>
<td>Syntax<br>
irr_selector =&nbsp;IrrGetCollisionGroupFromBox (&nbsp;node as
irr_node )<br>
<br>
Description<br>
Creates a collision object from the bounding box of a node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>ObjectSelector =&nbsp;IrrGetCollisionGroupFromBox(
CharacterNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionGroupFromTerrain</td>
</tr>
<tr>
<td>Syntax<br>
irr_selector =&nbsp;IrrGetCollisionGroupFromTerrain (&nbsp;node
as irr_node,&nbsp;level of detail as integer )<br>
<br>
Description<br>
Creates a collision object from a terrain node. A higher level of
detail improves the collision detection but consumes more resources and
can effect the speed of the process.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>TerrainSelector
=&nbsp;IrrGetCollisionGroupFromTerrain( TerrainNode, 1 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrRemoveCollisionGroup</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveCollisionGroup ( collisionGroup as&nbsp;
irr_selector, node as irr_node )<br>
<br>
Description<br>
Remove the collision selector from memory. This
collision selector must not be attached to another collision group when
it is removed, the collision group is first removed from the node you
supply.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveCollisionGroup( buildingCollision,
buildingNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrAttachCollisionGroupToNode</td>
</tr>
<tr>
<td>Syntax<br>
IrrAttachCollisionGroupToNode&nbsp; ( collisionGroup as&nbsp;
irr_selector, node as irr_node )<br>
<br>
Description<br>
Attaches a collision group that you have already
created from a mesh and a node to another node without duplicating the
collision geometry.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrAttachCollisionGroupToNode( boxCollision,
anotherBoxNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrSetNodeTriangleSelector</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNodeTriangleSelector&nbsp;(&nbsp; node as irr_node,
collisionGroup as&nbsp;
irr_selector )<br>
<br>
Description<br>
Assigns a collision group to a specific node..<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNodeTriangleSelector( newBuilding,
buildingCollision )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrCreateCombinedCollisionGroup</td>
</tr>
<tr>
<td>Syntax<br>
irr_selector =&nbsp;IrrCreateCombinedCollisionGroup<br>
<br>
Description<br>
Creates a collision object that can be used to combine several
collision objects together so you could add a couple of maps and a
terrain for example. Initially the combined collision object is empty.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>SelectorGroup =&nbsp;IrrCreateCombinedCollisionGroup</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrAddCollisionGroupToCombination</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddCollisionGroupToCombination (&nbsp;combined collision group
as
irr_selector,&nbsp;collision group as irr_selector )<br>
<br>
Description<br>
Adds a collision object to group of collision objects.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrAddCollisionGroupToCombination( SelectorGroup,
MapSelector )<br>
IrrAddCollisionGroupToCombination( SelectorGroup, TerrainSelector )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrRemoveAllCollisionGroupsFromCombination</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveAllCollisionGroupsFromCombination (&nbsp;combined
collision group as irr_selector )<br>
<br>
Description<br>
Empty a collision group object so that you can
add&nbsp;different&nbsp;collision groups to it.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveAllCollisionGroupsFromCombination(
SelectorGroup )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrRemoveCollisionGroupFromCombination</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveCollisionGroupFromCombination (&nbsp;combined collision
group as irr_selector,&nbsp;collision group as
irr_selector )<br>
<br>
Description<br>
Remove a single specified collision object from a group of collision
objects.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveCollisionGroupFromCombination( SelectorGroup,
TerrainSelector )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionPoint</td>
</tr>
<tr>
<td>Syntax<br>
integer = IrrGetCollisionPoint (&nbsp;start as
IRR_VECTOR,&nbsp;line_end as
IRR_VECTOR,&nbsp;collision group as
irr_selector,&nbsp;collision point as IRR_VECTOR )<br>
<br>
Description<br>
Detect the collision point of a ray in the scene with a collision
object if a collision was detected 1 is returned and vector collision
contains the co-ordinates of the point of collision<br>
<br>
Start defines the start point of the ray and End defines the endpoint<br>
<br>
Collision group is a selector object created with one of the above
functions.<br>
<br>
Collision point is the co-ordinates in 3D space of the collision object
the ray and the selector object.<br>
<br>
Example</td>
</tr>
<tr>
<td><span style="font-family: monospace;">collided
= IrrGetCollisionPoint ( StartVector, EndVector, CharacterSelector,
CollisionVector )</span><br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetRayFromScreenCoordinates</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetRayFromScreenCoordinates (&nbsp;screen x as
integer,&nbsp;screen y as integer,&nbsp;camera as irr_camera,
ray start as
IRR_VECTOR, ray end as IRR_VECTOR )<br>
<br>
Description<br>
Gets a ray that goes from the specified camera and through the screen
coordinates the information is copied into the supplied start and end
vectors. You can then use this ray in other collision operations.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetRayFromScreenCoordinates ( screen_x, screen_y,
CameraNode, StartVector, EndVector )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionNodeFromCamera</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrGetCollisionNodeFromCamera (&nbsp;camera as
irr_camera )<br>
<br>
Description<br>
A&nbsp;ray is cast through the camera and the nearest node that is
hit
by the ray is returned. If no node is hit zero is returned for the
object<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>TargetedNode =&nbsp;IrrGetCollisionNodeFromCamera (
CameraNode )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionNodeFromRay</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrGetCollisionNodeFromRay (&nbsp;start as
IRR_VECTOR,&nbsp;line_end as IRR_VECTOR )<br>
<br>
Description<br>
A&nbsp;ray is cast through the supplied coordinates and the nearest
node that is hit by the ray is returned. If no node is hit zero is
returned for the object<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>TargetedNode =&nbsp;IrrGetCollisionNodeFromRay(
RayStartVector, RayEndVector )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionNodeFromScreenCoordinates</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrGetCollisionNodeFromScreenCoordinates
(&nbsp;screen x as integer,&nbsp;screen y as integer )<br>
<br>
Description<br>
A&nbsp;ray is cast through the screen at the specified co-ordinates
and
the nearest&nbsp;node that is hit by the ray is returned. If no
node is
hit zero is returned for the object.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>SelectedNode
=&nbsp;IrrGetCollisionNodeFromScreenCoordinates( MouseX, MouseY )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetScreenCoordinatesFrom3DPosition</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetScreenCoordinatesFrom3DPosition (&nbsp;screen x as
integer,&nbsp;screen y as integer,&nbsp;at position as
IRR_VECTOR )<br>
<br>
Description<br>
Screen co-ordinates are returned for the position of the specified 3D
co-ordinates as if an object were drawn at them on the screen, this is
ideal for drawing 2D bitmaps or text around or on your 3D object on the
screen for example in the HUD of an aircraft. After the call Screen X
and Screen Y will contain the co-ordinates.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetScreenCoordinatesFrom3DPosition ( XPosition,
YPosition, RocketVector )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGet2DPositionFromScreenCoordinates
(contributed by agamemnus)</td>
</tr>
<tr>
<td>Syntax<br>
IrrGet2DPositionFromScreenCoordinates (&nbsp;screenx As integer,
screeny As integer,&nbsp; x As Single,&nbsp;y As
Single,&nbsp;camera As
irr_camera )<br>
<br>
Description<br>
Calculates the intersection between a ray
projected through the specified screen co-ordinates and a plane at the
world origin.<br>
<br>
The Parameters X, Y and Z will recieve the 2D position where the line
through the screen intersects with the plane.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGet2DPositionFromScreenCoordinates ( 256, 256, x, y,
OurCamera )<br>
IrrSetNodePosition( MyCursor, XPosition, YPosition, ZPosition )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGet3DPositionFromScreenCoordinates
(contributed by agamemnus)</td>
</tr>
<tr>
<td>Syntax<br>
IrrGet3DPositionFromScreenCoordinates (&nbsp;screenx as
integer,&nbsp;screeny as integer,&nbsp;x as single,&nbsp;y
as
single,&nbsp; z as single, camera as irr_camera,&nbsp;normalX
as single
= 0.0,&nbsp;normalY as single = 0.0,&nbsp;normalZ as single =
1.0,&nbsp;distanceFromOrigin as single = 0.0 )<br>
<br>
Description<br>
Calculates the intersection between a ray
projected through the specified screen co-ordinates and a plane defined
from a normal and the distance of that plane&nbsp;from the world
origin.<br>
<br>
The Parameters X, Y and Z will recieve the 3D position where the line
through the screen intersects with the plane.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGet3DPositionFromScreenCoordinates&nbsp;(
ScreenX, ScreenY, XPosition,
YPosition, ZPosition, MyCamera )<br>
IrrSetNodePosition( MyModel, XPosition, YPosition, ZPosition )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetChildCollisionNodeFromRay</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrGetChildCollisionNodeFromRay ( node as irr_node,
idMask as integer, recurse as uinteger, start as IRR_VECTOR, line_end
as IRR_VECTOR )<br>
<br>
Description<br>
A&nbsp;ray is cast through the supplied coordinates and the nearest
node that is hit by the ray is returned. if no node is hit zero is
returned for the object, only a subset of objects are tested, i.e. the
children of the supplied node that match the supplied id.Iif the
recurse option is enabled the entire tree of child objects connected to
this node are tested.<br>
<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetChildCollisionNodeFromRay&nbsp;( SectorNode,
100, IRR_OFF, StartPoint, EndPoint )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetChildCollisionNodeFromPoint</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrGetChildCollisionNodeFromPoint (&nbsp;node as
irr_node,&nbsp;idMask as integer,&nbsp;recurse as uinteger,
point as
IRR_VECTOR )<br>
<br>
Description<br>
The node and its children are recursively tested and the first node
that contains the matched point is returned. if no node is hit zero is
returned for the object, only a subset of objects are tested, i.e. the
children of the supplied node that match the supplied id. if the
recurse option is enabled the entire tree of child objects connected to
this node are tested.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetChildCollisionNodeFromPoint&nbsp;(
SectorNode, 100, IRR_ON, TestPoint )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetNodeAndCollisionPointFromRay</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrGetNodeAndCollisionPointFromRay (&nbsp;vectorStart as
IRR_VECTOR,&nbsp;vectorEnd as IRR_VECTOR,&nbsp;node as
irr_node,&nbsp;posX as single,&nbsp;posY as
single,&nbsp;posZ as
single,&nbsp;normalX as single,&nbsp;normalY as
single,&nbsp;normalZ as
single,&nbsp;id as integer = 0,&nbsp;rootNode as irr_node =
IRR_NO_OBJECT&nbsp;)<br>
<br>
Description<br>
A ray is cast through the specified co-ordinates
and the nearest node that has a collision selector object that is hit
by the ray is returned along with the coordinate of the collision and
the normal of the triangle that is hit. if no node is hit zero is
returned for the object. If a node is supplied for the rootNode that
tests for collision start from that node and are only tested against
that node and its children.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetRayFromScreenCoordinates ( screen_x, screen_y,
CameraNode, StartVector, EndVector )<br>
IrrGetNodeAndCollisionPointFromRay&nbsp;(&nbsp;StartVector,&nbsp;EndVector,
collidedNode, hitX, hitY, hitZ, normalX, normalY, normalZ, 0, myRoom )<br>
if NOT collidedNode = IRR_NO_OBJECT then<br>
&nbsp; &nbsp; Print "We hit something"<br>
end if</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetDistanceBetweenNodes</td>
</tr>
<tr>
<td>Syntax<br>
distance = IrrGetDistanceBetweenNodes ( nodeA as IRR_NODE,&nbsp;
nodeA as IRR_NODE )<br>
<br>
Description<br>
The distance between two nodes is measured
using&nbsp;fast maths functions that will show inaccuracies. Useful
for
when it is nessecary to test distances between many nodes..<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Dim As Single Distance &nbsp;=
IrrGetDistanceBetweenNodes( nodeA, nodeB )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrAreNodesIntersecting</td>
</tr>
<tr>
<td>Syntax<br>
test = IrrAreNodesIntersecting ( nodeA as IRR_NODE,&nbsp; nodeA as
IRR_NODE )<br>
<br>
Description<br>
Tests whether the bounding boxes are two nodes are
intersecting. Bounding boxes are axis aligned and do not rotate when
you rotate the nodes. This should be kept in mind when testing for
collisions.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>If NOT IrrAreNodesIntersecting&nbsp;( nodeA, nodeB
) = 0 Then<br>
&nbsp; &nbsp; Print "Collision"<br>
End If<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrIsPointInsideNode</td>
</tr>
<tr>
<td>Syntax<br>
irr_node = IrrIsPointInsideNode ( node as IRR_NODE, X as
Single,&nbsp;Y as Single,&nbsp;Z as Single&nbsp;)<br>
<br>
Description<br>
Determine if the specified point is inside the bounding box of the node.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>If NOT IrrIsPointInsideNode&nbsp;( node, X, Y, Z )
= 0 Then<br>
&nbsp; &nbsp; Print "Point is inside Node"<br>
End If<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 153);">IrrGetCollisionResultPosition
(contributed by The Car)</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetCollisionResultPosition ( selector As irr_selector,
ellipsoidPosition As IRR_VECTOR, ellipsoidRadius As IRR_VECTOR,
velocity As IRR_VECTOR, gravity As IRR_VECTOR, slidingSpeed as single,
outPosition As
IRR_VECTOR, outHitPosition As
IRR_VECTOR, outFalling As Integer )<br>
<br>
Description<br>
Collides
a moving ellipsoid with a 3d world with gravity and returns the
resulting new position of the ellipsoid, the point at which the
elipsoid collided with the surface and whether the ellipsoid is falling
through the air.<br>
<br>
This can be used for moving a character in a 3d world: The character
will slide at walls and is able to walk up stairs. The method used how
to calculate the collision result position is based on the paper
"Improved Collision detection and Response" by Kasper Fauerby.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetCollisionResultPosition&nbsp;( _<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;collisionGroup, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; vectPosition, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; vectRadius, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; vectVelocity, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; vectGravity, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; 0.00005, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; vectResultPosition, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; vectHitPosition<br>
&nbsp; &nbsp; &nbsp; &nbsp; areFalling )<br>
IrrSetNodePosition( rockNode, vectPosition.X,
vectPosition.Y,&nbsp;vectPosition.Z )</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Cameras"></a>Cameras</h2>
Calls for creating and controlling cameras in the scene. The camera
objects are used for defining a view point and a target point which is
used to render the scene.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddFPSCamera</td>
</tr>
<tr>
<td>Syntax<br>
irr_camera =&nbsp;IrrAddFPSCamera<br>
<br>
Description<br>
Adds a 'first person shooter' style camera into the scene that will be
used to define the view point and target point and other attributes of
the view into the 3D scene. If you haven't captured mouse and keyboard
events this camera can be controlled with the cursor keys and the mouse.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>FPSCamera =&nbsp;IrrAddFPSCamera</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddCamera</td>
</tr>
<tr>
<td>Syntax<br>
irr_camera =&nbsp;IrrAddCamera (&nbsp;camera X as
single,&nbsp;camera Y
as single,&nbsp;camera Z as single,&nbsp;target X as
single,&nbsp;target Y as single,&nbsp;target Z as
single )<br>
<br>
Description<br>
Adds a camera to into the scene that will be used to define the view
point and target point and other attributes of the view into the 3D
scene. Animators and other node functions can be applied to this node.<br>
<br>
Camera X, Camera Y and Camera Z define the view point of the camera.<br>
<br>
Target X, Target Y and Target Z define the target of the camera,<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>CameraObject =&nbsp;IrrAddCamera( 100,0,0, 0,-10,0)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddMayaCamera</td>
</tr>
<tr>
<td>Syntax<br>
irr_camera =&nbsp;IrrAddMayaCamera ( parent as irr_node,
rotateSpeed as single, zoomSpeed as single, moveSpeed as single )<br>
<br>
Description<br>
Adds a Maya style camera to into the scene the user can click with the
left, middle and right mouse buttons to move, zoom and rotate the
camera.<br>
<br>
rotateSpeed the speed at which the camera revolves<br>
zoomSpeed the speed at which the camera zooms in and out<br>
moveSpeed the speed at which the camera moves<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>CameraObject =&nbsp;IrrAddMayaCamera(
IRR_NO_OBJECT, 100.0, 100.0, 100.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSetCameraTarget</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetCameraTarget (&nbsp;camera as irr_camera,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as
single )<br>
<br>
Description<br>
The camera view point can be moved by simply using the
IrrSetNodePosition function but this operation will change the point
that the camera is pointing at.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetCameraTarget ( CameraObject, 0, 50, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrGetCameraTarget</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetCameraTarget (&nbsp;camera as irr_camera,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as
single )<br>
<br>
Description<br>
Get the point in space that the camera is looking at. The point is
copied into the supplied X, Y and Z variables<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetCameraTarget ( CameraObject,
LookAtX,&nbsp;LookAtY, LookAtZ )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrGetCameraUpDirection</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetCameraUpDirection (&nbsp;camera as irr_camera,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as
single )<br>
<br>
Description<br>
Get the up vector of a camera object into the supplied variables, this
controls the upward
direction of the camera and allows you to roll it for free flight
action. This specifies a point in space at which the top of the camera
points.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetCameraUpDirection&nbsp;( CameraObject,
TopOfCamPointsAtX,&nbsp;TopOfCamPointsAtY,&nbsp;TopOfCamPointsAtZ
)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSetCameraUpDirection</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetCameraUpDirection (&nbsp;camera as irr_camera,&nbsp;X as
single,&nbsp;Y as single,&nbsp;Z as
single )<br>
<br>
Description<br>
Set the up vector of a camera object, this controls the upward
direction of the camera and allows you to roll it for free flight
action. This specifies a point in space at which the top of the camera
points.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetCameraUpDirection&nbsp;( CameraObject,
TopOfCamPointsAtX,&nbsp;TopOfCamPointsAtY,&nbsp;TopOfCamPointsAtZ
)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrGetCameraOrientation</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetCameraOrientation (&nbsp;camera as irr_camera,&nbsp;X as
IRR_VECTOR,&nbsp;Y as&nbsp;IRR_VECTOR,&nbsp;Z
as&nbsp;IRR_VECTOR )<br>
<br>
Description<br>
Gets the vectors describing the camera direction useful after the
camera has been revolved.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetCameraOrientation&nbsp;( CameraObject,
VectorX,&nbsp;VectorY,&nbsp;VectorZ
)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrRevolveCamera</td>
</tr>
<tr>
<td>Syntax<br>
IrrRevolveCamera&nbsp;(&nbsp;camera as irr_camera,&nbsp;
yaw as
single,&nbsp;pitch as single,&nbsp;roll as single, drive as
single,&nbsp;strafe as single,&nbsp;elevate as single )<br>
<br>
Description<br>
Revolve the camera using quaternion calculations, this will help avoid
gimbal lock associated with normal Rotations and is ideal for
spacecraft and aircraft.<br>
<br>
The command takes six parameters that control yaw (turning left and
right), pitch (tilting up and down), roll (rolling left and right),
drive (moving forwards and backward), strafe (moving left and right)
and finally elevate (moving up and down)<br>
<br>
Many thanks to RogerBorg for this.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRevolveCamera&nbsp;( CameraObject, CameraYaw,
CameraPitch, CameraRoll, CameraDrive, CameraDrive, CameraStrafe,
CameraElevate
)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSetCameraUpAtRightAngle</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetCameraUpAtRightAngle (&nbsp;camera as irr_camera )<br>
<br>
Description<br>
Set the camera up at a right angle to the camera vector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetCameraUpAtRightAngle&nbsp;( CameraObject
)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSetCameraOrthagonal</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetCameraOrthagonal (&nbsp;camera as irr_camera, distanceX as
single,&nbsp;distanceY as single,&nbsp;distanceZ as single )<br>
<br>
Description<br>
Set the projection of the camera to an orthagonal
view, where there is no sense of perspective. The distance to the
target adjusts the width and height of the camera view, essentially the
smaller it is the larger the object will appear.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetNodePosition( MyTarget, tarX, tarY, tarZ )<br>
IrrGetNodePosition( MyCamera, camX, camY, camZ )<br>
IrrSetCameraOrthagonal&nbsp;( MyCamera, camX-tarX, camY-tarY,
camZ-tarZ
)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSetCameraClipDistance</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetCameraClipDistance (&nbsp;camera as
irr_camera,&nbsp;distance
as single )<br>
<br>
Description<br>
A camera clips objects in the distance that may be a part of the scene
to increase rendering performance without requiring you to manage
adding and deleting the objects from the view. This defines the
distance beyond which no polygons will be drawn.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetCameraClipDistance ( CameraObject, 12000 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSetActiveCamera</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetActiveCamera (&nbsp;camera as irr_camera )<br>
<br>
Description<br>
When you have several camera objects in the scene you can use this call
to define which of them is to be used to look through when drawing the
scene.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetActiveCamera( CameraObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSetCameraFOV</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetCameraFOV (&nbsp;camera as irr_camera,&nbsp;fov as single
)<br>
<br>
Description<br>
Sets the field of vision of the camera a wide field of vision will give
a distorted perspective, if the angle is too narrow the display will
feel restricted. The value is in radians and has a default value of PI
/ 2.5<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetCameraFOV( CameraObject, PI / 2 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSetCameraAspectRatio</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetCameraAspectRatio (&nbsp;camera as irr_camera, aspectRatio as
single
)<br>
<br>
Description<br>
Sets the aspect ratio of the camera in the same way you think of
standard screens and widescreens. A widescreen usually has an aspect
ratio of 16:9 or 16/9 = 1.78. The camera apect ratio is set up
automatically however if you are using split screen effects you
may&nbsp; need to change the camera aspect ratio.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetCameraAspectRatio( CameraObject, 1.78 )</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Lighting"></a>Lighting</h2>
Calls to create and effect lighting in the scene.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrAddLight</td>
</tr>
<tr>
<td>Syntax<br>
irr_node =&nbsp;IrrAddLight (&nbsp;x as
single,&nbsp;y as singlez as single,&nbsp;red as
single,&nbsp;green as single,&nbsp;blue as
single,&nbsp;size as single )<br>
<br>
Description<br>
Adds a light into scene to naturally illuminate your scene.<br>
<br>
X, Y and Y defines the coordinates of the light in the scene.<br>
<br>
Red, Green and Blue define the intensities of the lighting for those
colors. This is a fractional number ranging from 0 upwards the higher
the value the brighter the light.<br>
<br>
Size specifies the radius of effect of the light<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>WarningLight =&nbsp;IrrAddLight ( 0, 100, 50,
&nbsp;0.5,0.5,0.5, 50 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetAmbientLight</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetAmbientLight&nbsp;(&nbsp;Red as single,&nbsp;Green as
single, Blue as single )<br>
<br>
Description<br>
Sets the ambient lighting level&nbsp;in the scene, ambient light
casts
light evenly across the entire scene and can be used to increase the
overall lighting level. If should never be greater that the brightness
of the darkest area of your scene, it can however reduce the number of
lights you need in the scene.<br>
<br>
The Red, Green and Blue components of this lighting is supplied as
integers in the range or 0 to 255<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetAmbientLight( 72, 64, 64 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightAmbientColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightAmbientColor(&nbsp;Light as irr_node, Red as
single,&nbsp;Green as
single, Blue as single )<br>
<br>
Description<br>
Ambient color emitted by the light, ambient light
casts
light evenly across the entire scene and can be used to increase the
overall lighting level. If should never be greater that the brightness
of the darkest area of your scene, it can however reduce the number of
lights you need in the scene.<br>
<br>
The Red, Green and Blue components of this lighting is supplied as
singles specifying the brightness in each color channel<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightAmbientColor( SceneLight, 1.0, 0.1, 0.7 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightAttenuation</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightAttenuation(&nbsp;Light as irr_node, Red as
single,&nbsp;Green as
single, Blue as single )<br>
<br>
Description<br>
Changes the light strength fading over distance. Good values for
distance effects use ( 1.0, 0.0, 0.0) and simply add small values to
the second and third element.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightAttenuation( SceneLight, 1.0, 0.08, 0.07 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightCastShadows</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightCastShadows(&nbsp;Light as irr_node, cast_shadows as
uinteger )<br>
<br>
Description<br>
Specifies whether the light casts shadows in the scene or not.
Shadowing must be enabled in the IrrStart call and also on the nodes in
the scene.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightCastShadows( SceneLight, IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightDiffuseColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightDiffuseColor(&nbsp;Light as irr_node, Red as
single,&nbsp;Green as
single, Blue as single )<br>
<br>
Description<br>
IrrSetLightDiffuseColor<br>
<br>
The Red, Green and Blue components of this lighting is supplied as
singles specifying the brightness in each color channel<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightDiffuseColor( SceneLight, 1.0, 1.0, 0.8 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightFalloff</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightFalloff(&nbsp;Light as irr_node, Falloff as single )<br>
<br>
Description<br>
The light strength's decrease between Outer and Inner cone.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightFalloff( SceneLight, 0.8 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightInnerCone</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightInnerCone(&nbsp;Light as irr_node, InnerCone as single )<br>
<br>
Description<br>
The angle of the spot's inner cone. Ignored for other lights.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightInnerCone( SceneLight, 0.4 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightOuterCone</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightOuterCone(&nbsp;Light as irr_node, OuterCone as single )<br>
<br>
Description<br>
The angle of the spot's outer cone. Ignored for other lights.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightOuterCone( SceneLight, 0.9 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightRadius</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightRadius(&nbsp;Light as irr_node, Radius as single )<br>
<br>
Description<br>
Radius of light. Everything within this radius be be lighted. If some
artefacts can be seen when the radius is changed in this instance
simply make the radius a little large<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightRadius( SceneLight, 50.2 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightSpecularColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightSpecularColor(&nbsp;Light as irr_node, Red as
single,&nbsp;Green as
single, Blue as single )<br>
<br>
Description<br>
Sets the ambient lighting level&nbsp;in the scene, ambient light
casts
light evenly across the entire scene and can be used to increase the
overall lighting level. If should never be greater that the brightness
of the darkest area of your scene, it can however reduce the number of
lights you need in the scene.<br>
<br>
The Red, Green and Blue components of this lighting is supplied as
singles specifying the brightness in each color channel<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightSpecularColor( SceneLight, 1.0, 1.0, 1.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 255, 51);">IrrSetLightType</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetLightType(&nbsp;Light as irr_node, Light_type as E_LIGHT_TYPE
)<br>
<br>
Description<br>
The type of the light. All lights default to a point light but can be
changed with this setting to one of the following values: -
<p>ELT_POINT<br>
ELT_SPOT<br>
ELT_DIRECTIONAL<br>
<br>
Example</p>
</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetLightType( SceneLight, ELT_SPOT )</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Terrain"></a>Terrain</h2>
Calls to create and alter the properties of terrain meshes, special
nodes that are used to create large expansive landscapes.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddTerrain</td>
</tr>
<tr>
<td>Syntax<br>
irr_terrain =&nbsp;IrrAddTerrain (&nbsp;path as zstring
ptr,&nbsp;xPosition as single = 0.0, yPosition as single = 0.0,
zPosition as single = 0.0, xRotation as single = 0.0, yRotation as
single = 0.0, zRotation as single = 0.0, xScale as single = 1.0, yScale
as single = 1.0, zScale as single = 1.0, vertexAlpha as integer = 255,
vertexRed as integer = 255, vertexGreen as integer = 255, vertexBlue as
integer = 255, smoothing as integer = 0, maxLOD as integer = 5,
patchSize as IRR_TERRAIN_PATCH_SIZE = ETPS_17 )<br>
<br>
Description<br>
Creates a terrain object from a gray scale bitmap where bright pixels
are high points on the terrain and black pixels are low points. You
will inevitablly have to rescale&nbsp;the terrain during the call
or&nbsp;after it is created. The
Terrain object is a special dynamic mesh whose resoloution is reduced
in the distance to reduce the number of triangles it consumes.<br>
<br>
Path is the filename of a gray scale image used to define the contours
of the surface.<br>
xPosition, yPosition and zPosition define the position of the terrain<br>
xRotation, yRotation and zRotation define the rotation of the terrain<br>
xScale,&nbsp;xScale and&nbsp;xScale define the scale of the
terrain<br>
vertexAlpha, vertexRed, vertexGreen, vertexBlue, define the vertex
color of all points in the terrain.<br>
smoothing allows you to define whether the contours of the surface of
the terrain are smoothed over.<br>
maxLOD and patchsize control the properties of the level of detail
calculations applied to the terrain, it is recommended that these are
left at default values.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>TerrainNode =&nbsp;IrrAddTerrain(
"CanyonsHeightField.bmp" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddTerrainTile</td>
</tr>
<tr>
<td>Syntax<br>
irr_terrain = IrrAddTerrainTile (&nbsp;image as irr_image, tileSize
as
integer = 256, dataX as integer = 0, dataY as integer = 0, xPosition as
single = 0.0, yPosition as single = 0.0,&nbsp;zPosition as single =
0.0, xRotation as single = 0.0, yRotation as single = 0.0, zRotation as
single = 0.0, xScale as single = 1.0, yScale as single = 1.0, zScale as
single = 1.0, smoothing as integer = 1, maxLOD as integer = 5,
patchSize as IRR_TERRAIN_PATCH_SIZE = ETPS_17 )<br>
<br>
Description<br>
Creates a tilable terrain object from a gray scale bitmap where bright
pixels
are high points on the terrain and black pixels are low points. You
will inevitablly have to rescale the terrain during the call or after
it is created. The
Terrain object is a special dynamic mesh whose resoloution is reduced
in the distance to reduce the number of triangles it consumes.<br>
<br>
Unlike the origonal terrain object the tileable terrain object can be
attached to other terrain tile objects without being affected by cracks
between tiles caused by the level of detail mechanism. When working
with tile terrains it should be noted that the terrain is internally
divided up into patches that are patchSize - 1 and there is always one
invisible row of patches at the top and left of the terrain.
Essentially this means that if your tileSize is 128 x 128 the visible
size of your terrain will be 112 x 112 (with a patchSize of ETPS_17)<br>
<br>
Note: Tiled Terrain object can be automatically control with the Zone
Manager objects please refer to them for further details.<br>
<br>
Image is an image file loaded with IrrGetImage and containing a gray
scale image used to define the contours
of the surface.<br>
TileSize defines the size of the terrain independantly of the size of
the image used to create it<br>
xPosition, yPosition and zPosition define the position of the terrain<br>
xRotation, yRotation and zRotation define the rotation of the terrain<br>
xScale,&nbsp;xScale and&nbsp;xScale define the scale of the
terrain<br>
smoothing allows you to define whether the contours of the surface of
the terrain are smoothed over.<br>
maxLOD
and patchsize control the properties of the level of detail
calculations applied to the terrain, it is recommended that these are
left at default values.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>TerrainNode = IrrAddTerrainTile( EasterIslandImage, 128
)</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAddSphericalTerrain</td>
</tr>
<tr>
<td>Syntax<br>
irr_terrain = IrrAddSphericalTerrain (&nbsp; topPath as zstring
ptr, frontPath as zstring ptr, backPath as zstring ptr, leftPath as
zstring ptr, rightPath as zstring ptr, bottomPath as zstring ptr,
xPosition as single = 0.0, yPosition as single =
0.0,&nbsp;zPosition as single = 0.0, xRotation as single = 0.0,
yRotation as single = 0.0, zRotation as single = 0.0, xScale as single
= 1.0, yScale as single = 1.0, zScale as single = 1.0, vertexAlpha as
integer = 255, vertexRed as integer = 255, vertexGreen as integer =
255, vertexBlue as integer = 255, smoothing as integer = 0, spherical
as integer = 0, maxLOD as integer = 5, patchSize as
IRR_TERRAIN_PATCH_SIZE = ETPS_17 )<br>
<br>
Description<br>
Creates a spherical terrain that represents a planetary body. When
using this terrain it is better to think of it as a cube rather than a
sphere, in fact it <span style="font-weight: bold;">is</span>
a cube that is distorted so that its surface becomes spherical, like a
cube it has a top, bottom, left, right, front and back and co-ordinates
are thought of as being at position X,Y on cube face N. In someways
this makes working with placing things on the object simpler as you can
think of it as six flat surfaces.<br>
<br>
The first six paths are the path of six gray scale bitmaps where bright
pixels
are high points on the terrain and black pixels are low points. <br>
The position, rotation and scale of the terrain are specified with the
next series of parameters.<br>
Four parameters are used to set the vertex color of all the verticies
in the terrain.<br>
Smoothing is used to smooth out the contours of the hills in the
terrain.<br>
maxLOD and patchSize allow you to adjust the level of detail within the
terrain although it is usually best to leave these to default values.<br>
<br>
When creating heightmaps for the faces of the terrain you will need to
ensure that the height of pixels at the edge of adjoining sides of the
terrain are the same otherwise large visible cracks will appear at the
edges of the faces, the easiest way to do this is to create terrain
texture and then copy and/or rotate it onto its adjacent face. You can
get some suprisingly effective planets and asteroids with textures as
small as 32x32 but the object also runs well with a terrain size at the
maximum 256 x 256.<br>
<div style="text-align: center;"><img style="width: 512px; height: 546px;" alt="" src="media/sphere_cube.jpg"></div>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Terrain = IrrAddSphericalTerrain( _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"moonbase_top.bmp", _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"moonbase_front.bmp", _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"moonbase_back.bmp", _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"moonbase_left.bmp", _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"moonbase_right.bmp", _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"moonbase_bottom.bmp", _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;px,py,pz,&nbsp;
rx,ry,rz, 64.0,64.0,64.0, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
0, 255, 255, 255,&nbsp; -30, 0, 4, ETPS_17 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetTerrainHeight</td>
</tr>
<tr>
<td>Syntax<br>
single = IrrGetTerrainHeight (&nbsp;terrain as
irr_terrain,&nbsp;X as
single,&nbsp;Y as single )<br>
<br>
Description<br>
Get the height of a point on a terrain. This can be a particularlly
fast and accurate way to move an object over a terrain.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Y = IrrGetTerrainHeight&nbsp;( TerrainNode, X, Z )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrScaleTexture</td>
</tr>
<tr>
<td>Syntax<br>
IrrScaleTexture (&nbsp;terrain as irr_terrain,&nbsp;X as
single,&nbsp;Y as single )<br>
<br>
Description<br>
As a terrain object is a particularly huge mesh when textured are
applied to it they look extremely pixelated. To get over this effect a
terrain object can have two materials applied to it, one to give
general surface color and a second that is copied across the surface
like tiles to give a rough detailed texture. This call specifies the
scaling of this detail texture.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrScaleTexture ( TerrainNode, 20, 20 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetTerrainTileHeight</td>
</tr>
<tr>
<td>Syntax<br>
single = IrrGetTerrainTileHeight (&nbsp;terrain as
irr_terrain,&nbsp;X as
single,&nbsp;Y as single )<br>
<br>
Description<br>
Get the height of a point on a terrain tile. This can be a
particularlly fast and accurate way to move an object over a terrain.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>Y = IrrGetTerrainTileHeight ( TerrainNode, X, Z )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrScaleTileTexture</td>
</tr>
<tr>
<td>Syntax<br>
IrrScaleTileTexture (&nbsp;terrain as irr_terrain,&nbsp;X as
single,&nbsp;Y as single )<br>
<br>
Description<br>
As a tile terrain object is a particularly huge mesh when textured are
applied to it they look extremely pixelated. To get over this effect a
terrain object can have two materials applied to it, one to give
general surface color and a second that is copied across the surface
like tiles to give a rough detailed texture. This call specifies the
scaling of this detail texture.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrScaleTileTexture&nbsp;( TerrainNode, 20, 20 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrAttachTile</td>
</tr>
<tr>
<td>Syntax<br>
IrrAttachTile (&nbsp;terrain as irr_terrain, neighbouring_terrain
as irr_terrain,&nbsp; edge as&nbsp;integer )<br>
<br>
Description<br>
Set the adjacent tile to this tile node. To avoid cracks appearing
between tiles, tiles need to know which tiles are their neighbours and
which edges they are attached too.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrAttachTile( TerrainNorth, TerrainSouth, TOP_EDGE )<br>
IrrAttachTile( TerrainSouth, TerrainNorth, BOTTOM_EDGE )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetTileStructure</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetTileStructure (&nbsp;terrain as irr_terrain, image as
irr_image,&nbsp; x as&nbsp;integer, y as integer )<br>
<br>
Description<br>
Loads the tile structure from the supplied image file. Unlike the image
in the origonal call to create a terrain tile this image has a
different structure. The image should be in RGBA format, the alpha
value is used to set the height of the terrain and the RGB values are
used to set the color of the verticies. This can either be for loading
precalculated lighting into the scene or it can be used with the new
IRR_EMT_FOUR_DETAIL_MAP material type to define the weight of each of
the greyscale detail maps in the RGB channels of the detail map. The x
and y values can be used to load the structure from a specific point on
the bitmap.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetTileStructure( TerrainCove, CoveStructure, 0, 0 )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetTileColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetTileColor(&nbsp;terrain as irr_terrain, image as
irr_image,&nbsp; x as&nbsp;integer, y as integer )<br>
<br>
Description<br>
Loads the tile vertex colors from the supplied image file. The RGB
values are
used to set the color of the verticies. This can either be for loading
precalculated lighting into the scene or it can be used with the new
IRR_EMT_FOUR_DETAIL_MAP material type to define the weight of each of
the greyscale detail maps in the RGB channels of the detail map. The x
and y values can be used to load the structure from a specific point on
the bitmap.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetTileColor( TerrainCove, CoveStructure, 0, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrScaleSphericalTexture</td>
</tr>
<tr>
<td>Syntax<br>
IrrScaleSphericalTexture (&nbsp;terrain as irr_terrain,&nbsp;X
as
single,&nbsp;Y as single )<br>
<br>
Description<br>
As the surfaces of a sphereical terrain object are a particularly huge
mesh when textures are
applied to them they look extremely pixelated. To get over this effect
a
spherical terrain object can have two materials applied to it, one to
give
general surface color and a second that is copied across the surface
like tiles to give a rough detailed texture. This call specifies the
scaling of this detail texture.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrScaleSphericalTexture&nbsp;(
SphericalTerrainNode, 20, 20 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrSetSphericalTerrainTexture</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetSphericalTerrainTexture (&nbsp;terrain as
irr_terrain,&nbsp;topTexture as irr_texture, frontTexture as
irr_texture, backTexture as irr_texture, leftTexture as irr_texture,
rightTexture as irr_texture, bottomTexture as irr_texture,
materialIndex as uinteger )<br>
<br>
Description<br>
Apply six textures to the surface of a spherical terrain. By using the
material index you can set the color or the detail maps<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetSphericalTerrainTexture&nbsp;( TerrainNode, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_col_top.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_col_front.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_col_back.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_col_left.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_col_right.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_col_bottom.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrLoadSphericalTerrainVertexColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrLoadSphericalTerrainVertexColor (&nbsp;terrain as
irr_terrain,&nbsp;topMap as
irr_image, frontMap as irr_image, backMap as irr_image,
leftMap as irr_image, rightMap as irr_image, bottomMap
as irr_image )<br>
<br>
Description<br>
Apply six images to the vertex colors of the faces, this is useful for
setting the verticies so that they can be used with simple terrain
spattering described in the section on tiled terrains above.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrLoadSphericalTerrainVertexColor&nbsp;(
TerrainNode, _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_vert_top.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_vert_front.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_vert_back.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_vert_left.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_vert_right.bmp", _<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp;
&nbsp;&nbsp;"moobbase_vert_bottom.bmp" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetSphericalTerrainSurfacePosition</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetSphericalTerrainSurfacePosition (&nbsp;terrain as
irr_terrain, face as integer, logicalX as single, logicalZ as
single,&nbsp;X as single, Y as single, Z as single )<br>
<br>
Description<br>
Get the surface position of a logical point on the terrain. You supply
a face number and a logical X, Y position on that face and this call
will return the height of that point on the terrain sphere inside the
X, Y, Z parameters.<br>
<br>
Note: By subtracting the center of the sphere from this co-ordinate and
converting this vector to angles you can find the upward direction of
the point on the surface.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetSphericalTerrainSurfacePosition&nbsp;(
TerrainNode, IRR_TOP_FACE, buggyX, buggyZ, X, Y, Z )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetSphericalTerrainSurfacePositionAndAngle</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetSphericalTerrainSurfacePosition (&nbsp;terrain as
irr_terrain, face as integer, logicalX as single, logicalZ as
single,&nbsp;X as single, Y as single, Z as single, RotationX as
single, RotationY as single, RotationZ as single )<br>
<br>
Description<br>
Get the surface position and angle of a logical point on the terrain.
This is not the normal of the surface but essentially the angles to the
gravitational center.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetSphericalTerrainSurfacePositionAndAngle (
Terrain, F, I, J, PX,PY,PZ, RX,RY,RZ )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(153, 255, 153);">IrrGetSphericalTerrainLogicalSurfacePosition</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetSphericalTerrainSurfacePosition (&nbsp;terrain as
irr_terrain, face as integer, logicalX as single, logicalZ as
single,&nbsp;X as single, Y as single, Z as single )<br>
<br>
Description<br>
Convert a co-ordinate into a logical Spherical terrain position. Thanks
for the example from "David" posted on Infinity-Universe forum<br>
<br>
Please note that this calculation is not 100% accurate, it is advised
that the translation is done at altitude and the difference either
ignored or&nbsp;blended as the observer decends.<br>
<br>
Note: The height above the surface can be calculated simply by
calculating the length of the center of the planet to the surface and
then the center of the planet to the space coordinate and subracting
the two<br>
Note: The momentum could be calculated by converting two samples and
then measing the difference in height and X and Z on the face<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGetSphericalTerrainLogicalSurfacePosition
(&nbsp;Terrain, X, Y, Z, face, LX, LZ )</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Particles"></a>Particles</h2>
Calls to control the appearance and follow of particles in particle
systems.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetMinParticleSize</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMinParticleSize (&nbsp;particle emitter as
irr_particle_emitter,&nbsp;X as single,&nbsp;Y as
single )<br>
<br>
Description<br>
Particles in a particle system are simple 2 dimensional billboard like
objects, this sets the size of these particles, larger particles can be
effective and use less resources however they can look blocky if taken
too far.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMinParticleSize ( SmokeEmitter, 5, 5 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetMaxParticleSize</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetMaxParticleSize (&nbsp;particle emitter as
irr_particle_emitter,&nbsp;X as single,&nbsp;Y as
single )<br>
<br>
Description<br>
Particles in a particle system are simple 2 dimensional billboard like
objects, this sets the size of these particles, larger particles can be
effective and use less resources however they can look blocky if taken
too far.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetMaxParticleSize ( SmokeEmitter, 15, 15 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddParticleEmitter</td>
</tr>
<tr>
<td>Syntax<br>
irr_emitter =&nbsp;IrrAddParticleEmitter (&nbsp;particle system
as
irr_particle_system,&nbsp;settings as
IRR_PARTICLE_EMITTER )<br>
<br>
Description<br>
Adds a particle emitter to the particle system, this creates particles
and controls how they move and when they are to be removed. It requires
a very large number of parameters to define this flexible effect and as
such these parameters are stores in a special IRR_PARTICLE_EMITTER
structure.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyEmitter =&nbsp;IrrAddParticleEmitter(
SmokeParticles, SmokeEmitter )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddAnimatedMeshSceneNodeEmitter</td>
</tr>
<tr>
<td>Syntax<br>
irr_emitter =&nbsp;IrrAddAnimatedMeshSceneNodeEmitter(
particle_system as irr_particle_system, node as irr_node,
use_normal_direction as uinteger, normal_direction_modifier as single,
emit_from_every_vertex as integer, settings as IRR_PARTICLE_EMITTER )<br>
<br>
Description<br>
Creates a particle emitter for an animated mesh scene node<br>
<br>
Parameters:<br>
node -&nbsp; Pointer to the animated mesh scene node to emit
particles from<br>
useNormalDirection - If true, the direction of each particle created
will be the normal of the vertex that it's emitting from. The normal is
divided by the normalDirectionModifier parameter, which defaults to
100.0f.<br>
normalDirectionModifier - If the emitter is using the normal direction
then the normal of the vertex that is being emitted from is divided by
this number.<br>
everyMeshVertex -&nbsp; If true, the emitter will emit between
min/max particles every second, for every vertex in the mesh, if false,
it will emit between min/max particles from random vertices in the mesh.<br>
<br>
A large number of additional parameters are also required to define
this flexible effect and as such these parameters are stores in a
special IRR_PARTICLE_EMITTER
structure. The box size properties of this structure are unused in this
call<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyEmitter =&nbsp;IrrAddAnimatedMeshSceneNodeEmitter
( SmokeParticles, SceneNode, 1, 0.25, 0, SmokeEmitter )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddFadeOutParticleAffector</td>
</tr>
<tr>
<td>Syntax<br>
irr_affector =
IrrAddFadeOutParticleAffector (&nbsp;particle_system as
irr_particle_system )<br>
<br>
Description<br>
Adds a fade out affector to the particle system, this fades the
particles out as they come to the end of their lifespan and stops them
'popping' out of existance. This creates a convincing effect for fire
and smoke in particular.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyAffector = IrrAddFadeOutParticleAffector(
SmokeParticles )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddGravityParticleAffector</td>
</tr>
<tr>
<td>Syntax<br>
irr_affector =
IrrAddGravityParticleAffector (&nbsp;particle system as
irr_particle_system,&nbsp;x as single,&nbsp;y as
single,&nbsp;z as
single )<br>
<br>
Description<br>
Adds a gravity affector to the particle system, this gradually pulls
the particles in the direction of the effect, although it is called a
gravity effector it can be used to make a wind effect and have the
particles drift off to the side.<br>
<br>
X, Y and Z define the force that is applied to the particles over time.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyAffector = IrrAddGravityParticleAffector(
SmokeParticles, -0.1, 0,
0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddParticleAttractionAffector</td>
</tr>
<tr>
<td>Syntax<br>
irr_affector = IrrAddParticleAttractionAffector( particle_system as
irr_particle_system, x as Single, y as Single, z as Single, speed as
Single = 1.0, attract as uinteger = 1, affectX as uinteger = 1, affectY
as uinteger = 1, affectZ as uinteger = 1 )<br>
<br>
Description<br>
Creates a point attraction affector. This affector modifies the
positions of the particles and attracts them to a specified point at a
specified speed per second.<br>
<br>
Parameters:<br>
x,y,z - Point to attract particles to.<br>
speed - Speed in units per second, to attract to the specified point.<br>
attract - Whether the particles attract or detract from this point use
the constants IRR_ATTRACT or IRR_REPEL (defaults to IRR_ATTRACT)<br>
affectX - Whether or not this will affect the X position of the
particle, use 1 to effect the position and 0 to leave it unaffected (
defaults to true ).<br>
affectY - Whether or not this will affect the Y position of the
particle, use 1 to effect the position and 0 to leave it unaffected (
defaults to true ).<br>
affectZ - Whether or not this will affect the Z position of the
particle, use 1 to effect the position and 0 to leave it unaffected (
defaults to true ).<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyAffector = IrrAddParticleAttractionAffector(
SmokeParticles, 0.0, 10.0, 0.0,&nbsp; 20.0, IRR_ATTRACT, 1, 1, 1 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrCreateRotationAffector</td>
</tr>
<tr>
<td>Syntax<br>
irr_affector = IrrCreateRotationAffector ( particle_system as
irr_particle_system, Speed_X as Single, Speed_Y as Single, Speed_Z as
Single, pivot_X as Single, pivot_Y as Single, pivot_Z as Single )<br>
<br>
Description<br>
Creates a rotation affector. This affector modifies the positions of
the particles and attracts them to a specified point at a specified
speed per second.<br>
<br>
Parameters:<br>
speed x,y,z - Rotation in degrees per second<br>
pivot x,y,z - Point to rotate the particles around<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyAffector = IrrCreateRotationAffector( SmokeParticles,
-120.0, 0.0, 0.0,&nbsp; 0.0, 0.0, 0.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddStopParticleAffector</td>
</tr>
<tr>
<td>Syntax<br>
irr_affector = IrrAddStopParticleAffector ( particle_system as
irr_particle_system, time as uinteger, emitter as irr_emitter )<br>
<br>
Description<br>
The stop particle affector waits for the specified period of time to
elapse and then stops the specified emitter emitting particles by
setting its minimum and maximum particle emission rate to zero. The
emitter can easily be started up again by changing its emission rate.<br>
<br>
Parameters:<br>
Time - The number of milliseconds to elapse before the particles are
stopped<br>
Emitter - The particle generating object to stop<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyAffector = IrrAddStopParticleAffector( SmokeSystem,
1000, smoke_emitter )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddParticlePushAffector</td>
</tr>
<tr>
<td>Syntax<br>
irr_affector = IrrAddParticlePushAffector&nbsp;
(&nbsp;particle_system as irr_particle_system,&nbsp; x as
single,&nbsp; y as single, z as single, speedX as single, speedY as
single, speedZ as single, far as single,&nbsp;near as single,
column as single,
distant as integer )<br>
<br>
Description<br>
Creates a point push affector. This affector modifies the positions of
the particles and pushes them toward or away from a specified point at
a specified speed per second. The strength of this effect is adjusted
by a near and a far distance. Beyond the far distance the particle is
not effected at all and the closer you get to the center of the effect
the stronger the force is.<br>
<br>
If a near distance is defined (a value greater than 0.0) the effect is
somewhat different, particles closer to the center than the near
distance are not effected at all, and the stongest point of the effect
is always halfway between the near and far limits, for example if your
near distance was 25.0 and your far distance was 75.0 the strongest
force would be applied to particles at a distance of 50.0<br>
<br>
If a column width is defined the effect will only take place in a
vertical column that is that wide, this is useful for fountains of
water where as the water spreads out of the column a gravity affector
can take over.<br>
<br>
By adjusting these parameters and the strength you can create columns,
spheres, shells and rings of effect that can, in combination, push
particles in complex motions<br>
<br>
Parameters:<br>
x, y, z - Point to attract particles to or repel particles away from<br>
speedX, speedY, speedZ - A vector describing the strength of the effect<br>
Far - Furthest distance of effect<br>
Near - Closest distance of effect<br>
Column - The width of a vertical column in which the push affector has
influence, somewhat like the column of water in a fountain<br>
Distant - Use IRR_ON to apply the same force in the same directionto
all particles and use IRR_OFF to apply a force that radiates away from
the center of the effect&nbsp;<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>MyAffector = IrrAddParticlePushAffector (
ColumnOfSmoke,&nbsp;0, 0, 0,&nbsp;&nbsp;0, 100, 0,
&nbsp;100, 0.0, 0.0, IRR_OFF )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddColorMorphAffector</td>
</tr>
<tr>
<td>Syntax<br>
irr_affector = IrrAddColorMorphAffector&nbsp;
(&nbsp;particle_system as
irr_particle_system,&nbsp;numberOfParticles as
uinteger,&nbsp;particlecolors as uinteger ptr, particletimes as
uinteger ptr, smooth as uinteger )<br>
<br>
<br>
Description<br>
This clever effect by Dark Kilauea that allows you to provide an array
of colors and an optional array of times that effect the color of the
particle over its lifetime, the particle could start off bright orange
and fade away into grey and then black for example.<br>
<br>
Parameters:<br>
numEntries - the number of entries in the supplied table<br>
colors - the table of colors <br>
time - the table of times at which each color becomes active<br>
smooth - Use IRR_ON to smoothly blend between colors and use IRR_OFF to
sharply switch between colors<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DIM colors(0 to 4) as uinteger = {&nbsp;
IrrMakeARGB(0,255,255,128), _ ' yellow white<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
IrrMakeARGB(0,255,128,0), _ ' yellow<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
IrrMakeARGB(0,128,64,0), _ ' orange<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
IrrMakeARGB(0,0,0,128), _ ' slight blue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
IrrMakeARGB(255,0,0,0) } ' black and faded<br>
DIM times(0 to 4) as uinteger = {500, 800, 1250, 1500, 2000 }<br>
<br>
MyAffector = IrrAddColorMorphAffector( Fire.particles, 5, @colors(0),
@times(0), IRR_ON )<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrAddSplineAffector</td>
</tr>
<tr>
<td>Syntax<br>
irr_affector = IrrAddSplineAffector&nbsp;
(&nbsp;particle_system as
irr_particle_system,&nbsp;VertexCount as uinteger, verticies as
IRR_VERT ptr,&nbsp;speed as single, tightness as
single,&nbsp;attraction as single, deleteAtEnd as uinteger )<br>
<br>
Description<br>
This
clever effect by Dark Kilauea that allows you to create an affector
that moves the particles along the path of a spline for very controled
and complex particle motion.<br>
<br>
Parameters:<br>
VertexCount - Is the number of points in your spline<br>
Verticies - Is an array of IRR_VERT objects defining the X,Y and Z
position of points<br>
Speed - is the speed with which particles are moved along the spline<br>
tightness - is the tightness of the curve of the spline<br>
attraction - &nbsp;is how closely the particles are atracted to the
curve of the spline<br>
deleteAtEnd - Use IRR_ON to delete the particles when they reach the
end of the spline and use IRR_OFF to allow the particles to be deleted
naturally.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DIM splineverticies(0 to 3) as IRR_VERT<br>
<br>
splineverticies(0).x = 0.0 : splineverticies(0).y = 0.0 :
splineverticies(0).z = 0.0<br>
splineverticies(1).x = 0.0 : splineverticies(1).y = 20.0 :
splineverticies(1).z = 25.0<br>
splineverticies(2).x = 0.0 : splineverticies(2).y = 40.0 :
splineverticies(2).z = -25.0<br>
splineverticies(3).x = 0.0 : splineverticies(3).y = 60.0 :
splineverticies(3).z = 0.0<br>
<br>
IrrAddSplineAffector ( NeonLight.particles,&nbsp;4,
@splineverticies(0), &nbsp;2.0, 1.0, 5.0, &nbsp;IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrRemoveAffectors</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveAffectors (&nbsp;particle system as irr_particle_system )<br>
<br>
Description<br>
Removes all affectors from a particle system, you might use this if you
wanted to change the direction or strength of the wind for example.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveAffectors( SmokeParticles )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleEmitterDirection</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleEmitterDirection(&nbsp;particle_emitter as
irr_emitter, x as single, y as single, z as single )<br>
<br>
Description<br>
Set direction the emitter emits particles.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleEmitterDirection( MyEmitter, 0.0, 0.4,
0.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleEmitterMinParticlesPerSecond</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleEmitterMinParticlesPerSecond(&nbsp;particle_emitter
as irr_emitter, min_particles_per_second as uinteger )<br>
<br>
Description<br>
Set minimum number of particles the emitter emits per second.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleEmitterMinParticlesPerSecond( MyEmitter,
32 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleEmitterMaxParticlesPerSecond</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleEmitterMaxParticlesPerSecond(&nbsp;particle_emitter
as irr_emitter, max_particles_per_second as uinteger )<br>
<br>
Description<br>
Set maximum number of particles the emitter emits per second.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleEmitterMaxParticlesPerSecond( MyEmitter,
100 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleEmitterMinStartColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleEmitterMinStartColor(&nbsp;particle_emitter as
irr_emitter, Red as uinteger, Green as uinteger, Blue as uinteger )<br>
<br>
Description<br>
Set minimum starting color for particles.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleEmitterMinStartColor( MyEmitter, 255,
192, 128 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleEmitterMaxStartColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleEmitterMaxStartColor(&nbsp;particle_emitter as
irr_emitter, Red as uinteger, Green as uinteger, Blue as uinteger )<br>
<br>
Description<br>
Set maximum starting color for particles.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleEmitterMaxStartColor( MyEmitter, 255,
192, 128 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleAffectorEnable</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleAffectorEnable(&nbsp;particle_affector as
irr_affector, Enable as uinteger )<br>
<br>
Description<br>
Enable or disable an affector. Setting the value to 1 enables the
affector, setting it to 0 disables it. IRR_ON and IRR_OFF can be used
also.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleAffectorEnable( MyAffector, IRR_OFF )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetFadeOutParticleAffectorTime</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetFadeOutParticleAffectorTime(&nbsp;particle_affector as
irr_affector, FadeFactor as float )<br>
<br>
Description<br>
Alter the fadeout affector changing the fade out time.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetFadeOutParticleAffectorTime( MyAffector, 2000.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetFadeOutParticleAffectorTargetColor</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetFadeOutParticleAffectorTargetColor(&nbsp;particle_affector as
irr_affector, Red as uinteger, Green as uinteger, Blue as uinteger )<br>
<br>
Description<br>
Alter the fadeout affector changing the target color to the affector
fades to over time.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetFadeOutParticleAffectorTargetColor( MyAffector,
16, 8, 0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetGravityParticleAffectorDirection</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetGravityParticleAffectorDirection(&nbsp;particle_affector as
irr_affector, x as single, y as single, z as single)<br>
<br>
Description<br>
Alter the direction and force of gravity for a gravity affector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetGravityParticleAffectorDirection( MyAffector,
0.2, 0.1, 0.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetGravityParticleAffectorTimeForceLost</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetGravityParticleAffectorTimeForceLost(&nbsp;particle_affector
as irr_affector, time_force_lost as single )<br>
<br>
Description<br>
Set the time in milliseconds when the gravity force is totally lost and
the particle does not move any more.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetGravityParticleAffectorTimeForceLost( MyAffector,
800.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleAttractionAffectorAffectX</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleAttractionAffectorAffectX(&nbsp;particle_affector as
irr_affector, affect as uinteger )<br>
<br>
Description<br>
Set whether or not an atraction affector will affect particles in the X
direction.. Setting the value to 1 enables the effect, setting it to 0
disables it. IRR_ON and IRR_OFF can be used also.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleAttractionAffectorAffectX( MyAffector,
IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleAttractionAffectorAffectY</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleAttractionAffectorAffectY(&nbsp;particle_affector as
irr_affector, affect as uinteger )<br>
<br>
Description<br>
Set whether or not an atraction affector will affect particles in the Y
direction.. Setting the value to 1 enables the effect, setting it to 0
disables it. IRR_ON and IRR_OFF can be used also.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleAttractionAffectorAffectY( MyAffector,
IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleAttractionAffectorAffectZ</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleAttractionAffectorAffectZ(&nbsp;particle_affector as
irr_affector, affect as uinteger )<br>
<br>
Description<br>
Set whether or not an atraction affector will affect particles in the Z
direction.. Setting the value to 1 enables the effect, setting it to 0
disables it. IRR_ON and IRR_OFF can be used also.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleAttractionAffectorAffectZ( MyAffector,
IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleAttractionAffectorAttract</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleAttractionAffectorAttract(&nbsp;particle_affector as
irr_affector, affect as uinteger )<br>
<br>
Description<br>
Set whether or not the particles are attracted or repelled from an
attractor effector.. Use the values IRR_ATTRACT and IRR_REPEL for
convienience.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleAttractionAffectorAttract( MyAffector,
IRR_ATTRACT )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetParticleAttractionAffectorPoint</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetParticleAttractionAffectorPoint(&nbsp;particle_affector as
irr_affector, x as single, y as single, z as single )<br>
<br>
Description<br>
Set the point that particles will attract to when affected by this
attractor affector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetParticleAttractionAffectorPoint( MyAffector,
IRR_ATTRACT )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetRotationAffectorPivotPoint</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetRotationAffectorPivotPoint(&nbsp;particle_affector as
irr_affector, x as single, y as single, z as single )<br>
<br>
Description<br>
Set the point that particles will rotate about when affected by this
rotation affector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetRotationAffectorPivotPoint( MyAffector,
IRR_ATTRACT )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetFurthestDistanceOfEffect</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetFurthestDistanceOfEffect(&nbsp;particle_affector as
irr_affector, newDistance as single )<br>
<br>
Description<br>
Set the furthest distance of effect on particles affected by the push
affector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetFurthestDistanceOfEffect( MyAffector, 100.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetNearestDistanceOfEffect</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetNearestDistanceOfEffect(&nbsp;particle_affector as
irr_affector, newDistance as single )<br>
<br>
Description<br>
Set the nearest distance of effect on particles affected by the push
affector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetNearestDistanceOfEffect( MyAffector, 10.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetColumnDistanceOfEffect</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetColumnDistanceOfEffect(&nbsp;particle_affector as
irr_affector, newDistance as single )<br>
<br>
Description<br>
Set the column distance of effect on particles affected by the push
affector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetColumnDistanceOfEffect( MyAffector, 20.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetCenterOfEffect</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetCenterOfEffect(&nbsp;particle_affector as
irr_affector,&nbsp;x as single, y as single, z as single )<br>
<br>
Description<br>
Set the center of the effect of particles affected by the push affector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetCenterOfEffect( MyAffector, 0.0, PushHeight, 0.0 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 204);">IrrSetStrengthOfEffect</td>
</tr>
<tr>
<td>Syntax<br>
IrrSetStrengthOfEffect(&nbsp;particle_affector as
irr_affector,&nbsp;x as single, y as single, z as single )<br>
<br>
Description<br>
Set the strength of the effect of particles affected by the push
affector.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSetStrengthOfEffect( MyAffector, PipeVelocity, 0.0,
0.0 )</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Irrlicht_Graphical_User_Interface"></a>Irrlicht
Graphical User Interface</h2>
Calls to add graphical user interface objects to the screen that can be
drawn with a single call. At the moment this section is awaiting
further development in the wrapper.<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrGUIClear</td>
</tr>
<tr>
<td>Syntax<br>
IrrGUIClear ()<br>
<br>
Description<br>
Clears all GUI objects from the display.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGUIClear()</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrGUIRemove</td>
</tr>
<tr>
<td>Syntax<br>
IrrGUIRemove ( object as IRR_GUI_OBJECT )<br>
<br>
Description<br>
Removes the specified GUI object from the display.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrGUIRemove( myButton )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrGUIGetText</td>
</tr>
<tr>
<td>Syntax<br>
IrrGUIGetText ( object as IRR_GUI_OBJECT )<br>
<br>
Description<br>
Gets the text associated with a GUI object..<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DIM myString as wstring = IrrGUIGetText( myEditBox )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrGUISetText</td>
</tr>
<tr>
<td>Syntax<br>
IrrGUISetText ( object as IRR_GUI_OBJECT, text as wstring )<br>
<br>
Description<br>
Sets the text of a GUI object..<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>DIM fpsString as wstring * 256<br>
fpsString = "FPS: " + Str(IrrGetFPS)<br>
IrrGUISetText( myButton, fpsString )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddWindow</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddWindow ( title as wstring ptr,&nbsp;Top X as
integer,&nbsp;Top Y as integer,&nbsp;Bottom X as
integer,&nbsp;Bottom Y
as integer, modal as uinteger, parent as IRR_GUI_OBJECT ) as
IRR_GUI_OBJECT<br>
<br>
Description<br>
Creates an empty window that can form the frame to contain other
controls.<br>
<br>
Title is a wide string that contains the title of the window.<br>
<br>
Top X, Top Y, Bottom X and Bottom Y define a box in which the window is
drawn<br>
<br>
Modal determines if the window locks out the rest of the interface
until it is closed: -<br>
IRR_GUI_MODAL<br>
IRR_GUI_NOT_MODAL<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the window has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>windowObject = IrrAddWindow( "A Window",
4,0,200,64,&nbsp;IRR_GUI_MODAL )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddStaticText</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddStaticText (&nbsp;text as wstring ptr,&nbsp;Top X as
integer,&nbsp;Top Y as integer,&nbsp;Bottom X as
integer,&nbsp;Bottom Y
as integer,&nbsp;border as uinteger,&nbsp;wordwrap as
uinteger,&nbsp;parent as IRR_GUI_OBJECT ) as IRR_GUI_OBJECT<br>
<br>
Description<br>
Creates a static text object on the Graphical User Interface, this
simply displays the specifed text in the specified box.<br>
<br>
Text is a wide string that contains the text you want to display.<br>
<br>
Top X, Top Y, Bottom X and Bottom Y define a box in which the text is
drawn<br>
<br>
Border is used to draw a visible box around the text, its value should
be either of: -<br>
IRR_GUI_NO_BORDER<br>
IRR_GUI_BORDER<br>
<br>
Word wrap is used to define whether text is to be wrapped around into a
second line when it fills the width of the text box, its value should
be either of: -<br>
IRR_GUI_NO_WRAP 0<br>
IRR_GUI_WRAP 1<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the object has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>statictextObject = IrrAddStaticText( "Hello World",
4,0,200,16, NO_BORDER,
NO_WRAP, windowObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddButton</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddButton ( Top X as
integer,&nbsp;Top Y as integer,&nbsp;Bottom X as
integer,&nbsp;Bottom Y
as integer, id as&nbsp;integer, text as wstring
ptr,&nbsp;parent as IRR_GUI_OBJECT ) as IRR_GUI_OBJECT<br>
<br>
Description<br>
Add a clickable button object to the gui display.<br>
<br>
Top X, Top Y, Bottom X and Bottom Y define a box in which the button is
drawn<br>
<br>
id specifies a unique numerical reference for the button so events can
be identified as coming from this object<br>
<br>
text specified the label assigned to the button<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the object has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>buttonObject = IrrAddButton( 16,16,96,32, 120, "My
Button",&nbsp;windowObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddScrollBar</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddScrollBar ( horizontal as integer, Top X as
integer,&nbsp;Top Y as integer,&nbsp;Bottom X as
integer,&nbsp;Bottom Y
as integer, id as&nbsp;integer, currentValue as integer, maxValue
as integer,&nbsp;parent as IRR_GUI_OBJECT ) as IRR_GUI_OBJECT<br>
<br>
Description<br>
Add a scrollbar object to the GUI display.<br>
<br>
Horizontal defines if the scrollbar is horizontal or vertical,
acceptable values for this field are: -<br>
<br>
IRR_GUI_HORIZONTAL<br>
IRR_GUI_VERTICAL<br>
<br>
Top X, Top Y, Bottom X and Bottom Y define a box in which the scrollbar
is
drawn<br>
<br>
id specifies a unique numerical reference for the scrollbar so events
can be identified as coming from this object<br>
<br>
currentValue specified the current setting of the scrollbar<br>
<br>
maxValue specifies the maximum setting of the scrollbar<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the object has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>scrollbarObject = IrrAddScrollBar( IRR_GUI_HORIZONTAL,
16,16,96,32, 120, 128, 156,&nbsp;windowObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddListBox</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddListBox ( horizontal as integer, Top X as
integer,&nbsp;Top Y as integer,&nbsp;Bottom X as
integer,&nbsp;Bottom Y
as integer, id as&nbsp;integer, background as integer, parent as
IRR_GUI_OBJECT ) as IRR_GUI_OBJECT<br>
<br>
Description<br>
Add a listbox object containing a list of items to the gui display.<br>
<br>
horizontal specifies whether the scrollbar is oriented horizontally or
vertically. acceptable values are: -<br>
<br>
IRR_GUI_HORIZONTAL<br>
IRR_GUI_VERTICAL<br>
<br>
Top X, Top Y, Bottom X and Bottom Y define a box in which the listbox
is
drawn<br>
<br>
id specifies a unique numerical reference for the listbox so events can
be identified as coming from this object<br>
<br>
background specifies whether the background of the listbox should be
drawn. acceptable values are: -<br>
<br>
IRR_GUI_DRAW_BACKGROUND<br>
IRR_GUI_EMPTY_BACKGROUND<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the object has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>listboxObject = IrrAddListBox(&nbsp;16,16,96,32,
120, IRR_GUI_DRAW_BACKGROUND,&nbsp;windowObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddListBoxItem</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddListBoxItem ( listbox as IRR_GUI_OBJECT, text as wstring )<br>
<br>
Description<br>
Add a text element to a list box.<br>
<br>
listbox defines the listbox gui object to add the string too.<br>
<br>
text is the string containing the new item<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrAddListBoxItem(&nbsp;listboxObject, "Apples" )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrInsertListBoxItem</td>
</tr>
<tr>
<td>Syntax<br>
IrrInsertListBoxItem ( parent as IRR_GUI_OBJECT, text as wstring, index
as integer )<br>
<br>
Description<br>
Insert a text element to a list box.<br>
<br>
listbox defines the listbox gui object to insert the string into.<br>
<br>
text is the string containing the new item<br>
<br>
index is the position at which to insert the item<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrInsertListBoxItem(&nbsp;listboxObject, "Pears",
3 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrRemoveListBoxItem</td>
</tr>
<tr>
<td>Syntax<br>
IrrRemoveListBoxItem ( parent as IRR_GUI_OBJECT, index as integer )<br>
<br>
Description<br>
Remove a text element from a list box.<br>
<br>
listbox defines the listbox gui object to remove the string from.<br>
<br>
index is the position of the item to be removed<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrRemoveListBoxItem(&nbsp;listboxObject, 2 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrSelectListBoxItem</td>
</tr>
<tr>
<td>Syntax<br>
IrrSelectListBoxItem ( parent as IRR_GUI_OBJECT, index as integer )<br>
<br>
Description<br>
Select a text element in a list box.<br>
<br>
listbox defines the listbox gui object to select the item within.<br>
<br>
index is the position of the item to be removed<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrSelectListBoxItem(&nbsp;listboxObject, 1 )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddEditBox</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddEditBox (text as wstring,&nbsp; horizontal as integer, Top X
as
integer,&nbsp;Top Y as integer,&nbsp;Bottom X as
integer,&nbsp;Bottom Y
as integer, id as&nbsp;integer, border as integer, password as
integer, parent as IRR_GUI_OBJECT ) as IRR_GUI_OBJECT<br>
<br>
Description<br>
Add a editbox object containing a list of items to the GUI display.<br>
<br>
text is the string that is inserted into the editbox<br>
<br>
Top X, Top Y, Bottom X and Bottom Y define a box in which the editbox
is
drawn<br>
<br>
id specifies a unique numerical reference for the editbox so events can
be identified as coming from this object<br>
<br>
border specifies whether the object has a border drawn around it.
acceptable values are: -<br>
<br>
IRR_GUI_NO_BORDER<br>
IRR_GUI_BORDER<br>
<br>
password specifies whether the editbox is a password field that hides
the text typed into it. acceptable values are: -<br>
<br>
IRR_GUI_PASSWORD<br>
IRR_GUI_NOT_PASSWORD<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the object has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>editboxObject = IrrAddEditBox( "My String",
16,16,96,32, 120, IRR_GUI_BORDER, IRR_GUI_NOT_PASSWORD, windowObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddCheckBox</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddCheckBox (text as wstring,&nbsp; horizontal as integer, Top X
as
integer,&nbsp;Top Y as integer,&nbsp;Bottom X as
integer,&nbsp;Bottom Y
as integer, id as&nbsp;integer, checked as integer, parent as
IRR_GUI_OBJECT ) as IRR_GUI_OBJECT<br>
<br>
Description<br>
Add a checkbox object to the GUI display.<br>
<br>
text is the string that is used to label the checkbox<br>
<br>
Top X, Top Y, Bottom X and Bottom Y define a box in which the checkbox
is
drawn<br>
<br>
id specifies a unique numerical reference for the checkbox so events
can be identified as coming from this object<br>
<br>
checked specifies whether the object starts in the checked state.
acceptable values are: -<br>
<br>
IRR_OFF<br>
IRR_ON<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the object has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>checkboxObject = IrrAddCheckBox( "My Checkbox",
16,16,96,32, 120, IRR_OFF,&nbsp;windowObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrCheckCheckBox</td>
</tr>
<tr>
<td>Syntax<br>
IrrCheckCheckBox ( checkbox as IRR_GUI_OBJECT, checked as integer )<br>
<br>
Description<br>
Set the checked state of a checkbox.<br>
<br>
checkbox defines the checkbox GUI object to check or uncheck.<br>
<br>
checked specifies whether the object starts in the checked state.
acceptable values are: -<br>
<br>
IRR_OFF<br>
IRR_ON<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>IrrCheckCheckBox( checkboxObject, IRR_ON )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddImage</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddImage (texture as IRR_TEXTURE,&nbsp; horizontal as integer, X
as
integer,&nbsp;Y as integer, useAlpha as integer, id
as&nbsp;integer, parent as IRR_GUI_OBJECT ) as IRR_GUI_OBJECT<br>
<br>
Description<br>
Add an image object to the GUI display.<br>
<br>
texture is a loaded texture object that is to be displayed<br>
<br>
X, Y define a position at which the image is drawn<br>
<br>
useAlpha specifies whether the alpha channel of the texture is to be
used. acceptable values are: -<br>
<br>
IRR_IGNORE_ALPHA<br>
IRR_USE_ALPHA<br>
<br>
id specifies a unique numerical reference for the image so events can
be identified as coming from this object<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the object has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>imageObject = IrrAddImage( texture, 16,16,
IRR_IGNORE_ALPHA, 120, windowObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrAddFileOpen</td>
</tr>
<tr>
<td>Syntax<br>
IrrAddFileOpen (title as wstring,&nbsp; id as&nbsp;integer,
checked as integer, modal as integer, parent as IRR_GUI_OBJECT ) as
IRR_GUI_OBJECT<br>
<br>
Description<br>
Open a modal file open dialog so that a file can be selected.<br>
<br>
title is the string that is displayed in the titlebar of the file
selector window.<br>
<br>
id specifies a unique numerical reference for the button so events can
be identified as coming from this object<br>
<br>
Modal determines if the window locks out the rest of the interface
until it is closed: -<br>
IRR_GUI_MODAL<br>
IRR_GUI_NOT_MODAL<br>
<br>
Parent defines the parent object of this window. This can be ommited if
the window has no parent.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>fileOpenObject = IrrAddFileOpen( "Select a bitmap",
120, IRR_GUI_MODAL,&nbsp;windowObject )</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(204, 204, 255);">IrrGetLastSelectedFile</td>
</tr>
<tr>
<td>Syntax<br>
IrrGetLastSelectedFile ( fileopenobject as IRR_GUI_OBJECT, checked as
integer )<br>
<br>
Description<br>
Get the last file name selected from a file selection dialog.<br>
<br>
Example</td>
</tr>
<tr style="font-family: monospace;">
<td>fileName = IrrGetLastSelectedFile()</td>
</tr>
</tbody>
</table>
<br>
<hr style="width: 100%; height: 2px;">
<h2><a name="Wrapper_Structure_Defintions"></a>Wrapper
Structure Defintions</h2>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr style="font-weight: bold;">
<td style="background-color: rgb(255, 204, 255);">IRR_MOUSE_EVENT</td>
</tr>
<tr>
<td><span style="font-weight: bold;">action</span>
as uinteger<br>
Action determines which mouse action took place and can be one of the
following values: -<br>
IRR_EMIE_LMOUSE_PRESSED_DOWN<br>
IRR_EMIE_RMOUSE_PRESSED_DOWN<br>
IRR_EMIE_MMOUSE_PRESSED_DOWN<br>
IRR_EMIE_LMOUSE_LEFT_UP<br>
IRR_EMIE_RMOUSE_LEFT_UP<br>
IRR_EMIE_MMOUSE_LEFT_UP<br>
IRR_EMIE_MOUSE_MOVED<br>
IRR_EMIE_MOUSE_WHEEL<br>
<br>
<span style="font-weight: bold;">delta</span>
as single<br>
This defines the amount of movement of the mouse wheel.<br>
<br>
<span style="font-weight: bold;">x</span> as
integer<br>
<span style="font-weight: bold;">y</span> as
integer<br>
These define the screen co-ordinates at which the event took place.</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 255);"><span style="font-weight: bold;">IRR_KEY_EVENT</span></td>
</tr>
<tr>
<td><span style="font-weight: bold;">key</span>
as uinteger<br>
The scan code for the key<br>
<br>
<span style="font-weight: bold;">direction</span>
as uinteger<br>
Whether the key moved up or down, this can be either of: -<br>
IRR_KEY_UP<br>
IRR_KEY_DOWN<br>
<br>
<span style="font-weight: bold;">flags</span>
as uinteger<br>
Bits are set in this parameter to specify whether the shift or control
key was keydown at the time the key action occured<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 255);"><span style="font-weight: bold;">IRR_PARTICLE_EMITTER</span></td>
</tr>
<tr>
<td><span style="font-weight: bold;">min_box_x</span>
as single<br>
<span style="font-weight: bold;">min_box_y</span>
as single<br>
<span style="font-weight: bold;">min_box_z</span>
as single<br>
<span style="font-weight: bold;">max_box_x</span>
as single<br>
<span style="font-weight: bold;">max_box_y</span>
as single<br>
<span style="font-weight: bold;">max_box_z</span>
as single<br>
These six parameters define a box in space inside which the position of
a particle is randomly created.<br>
<br>
<span style="font-weight: bold;">direction_x</span>
as single<br>
<span style="font-weight: bold;">direction_y</span>
as single<br>
<span style="font-weight: bold;">direction_z</span>
as single<br>
These three parameters define a direction into which the particles will
be ejected as the animation plays<br>
<br>
<span style="font-weight: bold;">min_paritlcles_per_second</span>
as uinteger<br>
<span style="font-weight: bold;">max_paritlcles_per_second</span>
as uinteger<br>
A range defining the minimum and maximum number of particles that will
be created each second.<br>
<br>
<span style="font-weight: bold;">min_start_color_red</span>
as integer<br>
<span style="font-weight: bold;">min_start_color_green</span>
as integer<br>
<span style="font-weight: bold;">min_start_color_blue</span>
as integer<br>
<span style="font-weight: bold;">max_start_color_red
</span>as integer<br>
<span style="font-weight: bold;">max_start_color_green
</span>as integer<br>
<span style="font-weight: bold;">max_start_color_blue</span>
as integer<br>
Although particles can be textured by texturing the particle system
node, these can be used to apply a&nbsp;range that tints the color
of the particles.<br>
<br>
<span style="font-weight: bold;">min_lifetime </span>as
uinteger<br>
<span style="font-weight: bold;">max_lifetime</span>
as uinteger<br>
How long the partilce will live, long lifespans can create very large
numbers of particles<br>
<br>
<span style="font-weight: bold;">min_start_sizeX </span>as
single<br>
<span style="font-weight: bold;">min_start_sizeY </span>as
single<br>
<span style="font-weight: bold;">max_start_sizeX </span>as
single<br>
<span style="font-weight: bold;">max_start_sizeY </span>as
single<br>
The minimum and maximum start sizes for the particles.<br>
<br>
<span style="font-weight: bold;">max_angle_degrees</span>
as integer<br>
The maximum number of degrees that the ejected particles will deviate
from the defined direction</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 255);"><span style="font-weight: bold;">IRR_VERT</span></td>
</tr>
<tr>
<td>A vertex is a point is space that also defines a number
of properties that can be applied to the corner of a triangle.<br>
<br>
<span style="font-weight: bold;">x</span> as
single<br>
<span style="font-weight: bold;">y</span> as
single<br>
<span style="font-weight: bold;">z</span> as
single<br>
The 3D position of the vertex<br>
<br>
<span style="font-weight: bold;">normal_x</span>
as single<br>
<span style="font-weight: bold;">normal_y</span>
as single<br>
<span style="font-weight: bold;">normal_z</span>
as single<br>
The&nbsp;normal direction of the vertex<br>
<br>
<span style="font-weight: bold;">vcolor</span>
as uinteger<br>
The 32bit ARGB color of the vertex<br>
<br>
<span style="font-weight: bold;">texture_x</span>
as single<br>
<span style="font-weight: bold;">texture_y</span>
as single<br>
The 2 dimensional co-ordinate of the vertex when it is mapped to an
applied texture (0 to 1)<br>
</td>
</tr>
</tbody>
</table>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="background-color: rgb(255, 204, 255);"><span style="font-weight: bold;">IRR_VECTOR</span></td>
</tr>
<tr>
<td><span style="font-weight: bold;">x</span>
as single<br>
<span style="font-weight: bold;">y</span> as
single<br>
<span style="font-weight: bold;">z</span> as
single<br>
A point that can be use for co-ordinates, directions or speeds.<br>
</td>
</tr>
</tbody>
</table>
<br>
</body></html>